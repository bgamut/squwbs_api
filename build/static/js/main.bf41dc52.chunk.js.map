{"version":3,"sources":["components/Header.jsx","components/Todo.jsx","components/Home.js","components/NoMatch.js","components/NavBar.js","serviceWorker.js","index.js","App.js"],"names":["Header","StyleSheet","create","headerContainer","backgroundColor","width","height","header","padding","paddingVertical","alignItems","flexDirection","minHeight","headerCenter","flex","order","headerLeft","headerRight","title","fontSize","fontWeight","textAlign","color","_ref","onBack","react_default","a","createElement","id","Text","accessibilityRole","Todo","props","console","log","items","_useState","useState","_useState2","Object","slicedToArray","useEffect","itemsChanged","className","components_Header","Home","NoMatch","NavBar","react_router_dom","to","Boolean","window","location","hostname","match","ReactDOM","render","state","setState","handleItems","toConsumableArray","react_router","exact","path","component","components_NavBar","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRA4CeA,SAlCAC,IAAWC,OAAO,CAC7BC,gBAAiB,CACjBC,gBAAgB,UAChBC,MAAM,QACNC,OAAO,QAGPC,OAAQ,CACRC,QAAS,GACTC,gBAAiB,EACjBC,WAAY,SACZC,cAAe,MACfC,UAAW,IAEXC,aAAc,CACdC,KAAM,EACNC,MAAO,GAEPC,WAAY,CACZD,MAAO,EACPV,MAAO,IAEPY,YAAa,CACbF,MAAO,EACPV,MAAO,IAEPa,MAAO,CACPC,SAAU,GACVC,WAAY,MACZC,UAAW,SACXC,MAAO,WApCI,SAAAC,KAAGC,OAAH,IAAWN,EAAXK,EAAWL,MAAX,OACXO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACJH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,kBAAkB,UAAUF,GAAG,SAASV,MCDtC,SAASa,EAAKC,GAE5BC,QAAQC,IAAIF,EAAMG,OAFgB,IAAAC,EAGVC,mBAASL,EAAMG,OAHLG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAG3BD,EAH2BG,EAAA,GAAAA,EAAA,GAwClC,OAlCAG,oBAAU,WACRT,EAAMU,aAAaP,IAEnB,CAACA,IAgCDV,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,QACblB,EAAAC,EAAAC,cAACiB,EAAD,gCCvCSC,EANF,kBACXpB,EAAAC,EAAAC,cAAA,oBCKamB,EANC,kBACdrB,EAAAC,EAAAC,cAAA,wBCSaoB,EATA,kBACbtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMC,GAAG,KAAT,QACAxB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMC,GAAG,SAAT,WCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cCIA,SAAaK,GAAM,IAAAI,EAGTC,mBACtB,CAACF,MAAM,KAJwBG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAG1BqB,EAH0BnB,EAAA,GAGnBoB,EAHmBpB,EAAA,GAOjC,SAASqB,EAAYxB,GACnBuB,EAAS,CAACvB,MAAMI,OAAAqB,EAAA,EAAArB,CAAIJ,KACpBF,QAAQC,IAAIuB,GAEV,OACAhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiB,EAAD,CAAQ1B,MAAQ,WAChBO,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjCpB,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQP,OAAQ,kBAAI/B,EAAAC,EAAAC,cAACI,EAAD,CAAMW,aAAciB,EAAaxB,MAAOsB,EAAMtB,WACpFV,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOG,UAAWlB,KAEpBrB,EAAAC,EAAAC,cAACsC,EAAD,SDxBQ,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf41dc52.chunk.js","sourcesContent":["import React from 'react';\nimport {SafeAreaView, View, Text, StyleSheet} from 'react-native';\nimport '../css/header.css'\n\nconst Header = ({ onBack, title }) => (\n    <div id='titleBar'>        \n        <Text accessibilityRole=\"heading\" id='title'>{title}</Text>\n    </div>\n);\n\nconst styles = StyleSheet.create({\n    headerContainer: {\n    backgroundColor:'#333333',\n    width:'100vw',\n    height:'22px',\n    \n    },\n    header: {\n    padding: 10,\n    paddingVertical: 5,\n    alignItems: 'center',\n    flexDirection: 'row',\n    minHeight: 50\n    },\n    headerCenter: {\n    flex: 1,\n    order: 2\n    },\n    headerLeft: {\n    order: 1,\n    width: 80\n    },\n    headerRight: {\n    order: 3,\n    width: 80\n    },\n    title: {\n    fontSize: 19,\n    fontWeight: '600',\n    textAlign: 'center',\n    color: 'white'\n    },\n});\n\nexport default Header;\n","import React, {useReducer,useState,useEffect} from 'react'\nimport Form from './Form'\nimport List from './List'\nimport Header from './Header'\nvar i=1\n export default function Todo(props){\n\n  console.log(props.items)\n  const [items, setItems]=useState(props.items);\n\n  \n  useEffect(()=>{\n    props.itemsChanged(items);\n\n  },[items])\n  function handleOnAdd(value){\n    setItems([...items,\n        {\n          id:i++,\n          text:value\n        } \n      ])\n      \n    \n  }\n  function handleOnDelete(id){\n   \n    const index=items.findIndex((item)=>item.id===id);\n      if(index !== -1){\n        items.splice(index, 1)\n        setItems(\n          [\n            ...items\n          ]\n        )\n      }\n  }\n  /*\n   return(\n    <div className='todo'>\n      <Form onAdd = {handleOnAdd}/>\n      <List items = {items} onDelete={handleOnDelete}/>\n    </div>\n   )\n   */\n  return(\n    <div className='todo'>\n      <Header/>\n    </div>\n   )\n }","import React from 'react'\n\nconst Home = () => (\n  <div>\n    Home\n  </div>\n)\n\nexport default Home\n","import React from 'react'\n\nconst NoMatch = () => (\n  <div>\n    No Match\n  </div>\n)\n\nexport default NoMatch\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst NavBar = () => (\n  <div>\n    <div>\n      <Link to=\"/\">Home</Link> \n      <Link to=\"/todo\">todo</Link> \n      \n    </div>\n  </div>\n)\nexport default NavBar\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\n import React, {useReducer,useState} from 'react'\n import Todo from './components/Todo'\n import './App.css'\n import Header from './components/Header';\n import { BrowserRouter,HashRouter, Route, Link,Router,Switch } from \"react-router-dom\";\n import Home from './components/Home'\n import NoMatch from './components/NoMatch'\n import NavBar from './components/NavBar'\n var i=1\n export default function App(props){\n\n    \n  const [state, setState]=useState(\n    {items:[],\n    }\n  )\n  function handleItems(items){\n    setState({items:[...items]})\n    console.log(state)\n  }\n      return (\n      <div>\n      <Header title = 'Reader'/>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/todo\" render={()=><Todo itemsChanged={handleItems} items={state.items}/>}/>\n          <Route component={NoMatch} />\n        </Switch>\n        <NavBar />\n      </BrowserRouter>\n    </div>\n      );\n    \n  }\n"],"sourceRoot":""}