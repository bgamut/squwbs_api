{"version":3,"sources":["context.js","components/NavBar.js","components/Drawer.js","components/Header.js","components/HorizontalSwipeElements.js","components/SwipeableCard.js","components/SwipeableList.js","components/Swiper.js","components/SwipeableScroller.js","components/AddPost.js","components/Home.js","components/Posts.js","actions/postActions.js","components/RouterElement.js","components/NoMatch.js","App.js","serviceWorker.js","index.js","components/icons/96x96.png"],"names":["Context","React","createContext","ContextController","_ref","children","intialState","posts","random","yscroll","Animated","Value","headerHeight","loading","data","page","seed","error","refreshing","closedIndices","index","dataManipulated","filteredData","dy","horizontalscroll","opacity","drawerToggle","drawerAnimation","translateY","userData","spinValue","_useState","useState","_useState2","Object","slicedToArray","state","setState","react_default","a","createElement","Provider","value","styles","StyleSheet","create","box","margin","height","Dimensions","get","backgroundColor","alignItems","justifyContent","flexDirection","flex","color","touch","link","textDecorationLine","NavBar","_ref2","View","style","fontSize","textShadowColor","textShadowOffset","width","textShadowRadius","defineProperty","href","TouchableOpacity","Text","id","textAlign","name","require","Drawer","props","_useContext","useContext","_useContext2","drawerInterp","interpolate","inputRange","outputRange","ShowSlidingDrawer","timing","duration","toValue","start","objectSpread","useEffect","easing","Easing","linear","footerHeight","borderColor","borderRadius","borderWidth","marginBottom","className","padding","position","zIndex","onPress","Image","source","Top","resizeMode","textStyle","ROOT_SLIDING_DRAWER_CONTAINER","transform","translateX","maxHeight","MAIN_SLIDING_DRAWER_CONTAINER","components_NavBar","paddingHorizontal","MainContainer","top","bottom","left","Platform","OS","pStyle","PureComponent","activeDotStyle","marginLeft","marginRight","marginTop","container","controlsWrapperStyle","right","dotStyle","dotsWrapperStyle","nextButtonStyle","prevButtonStyle","sliderContainer","overflow","Component","SwipeableCard","dragPos","ValueXY","x","y","_panResponder","PanResponder","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onPanResponderMove","e","gestureState","setValue","dx","onPanResponderRelease","vx","screenWidth","Math","abs","sequence","spring","itemIndex","filtered","filter","item","toConsumableArray","dismiss","bounciness","assign","panHandlers","background","console","log","uri","picture","selectable","String","name_first","name_last","email","DefaultFlatList","url","concat","fetch","then","res","json","copy","results","indexed","i","length","catch","makeRemoteRequest","UIManager","setLayoutAnimationEnabledExperimental","borderTopWidth","borderBottomWidth","FlatList","renderItem","components_SwipeableCard","first","last","thumbnail","keyExtractor","scrollEventThrottle","onEndReachedThreshold","Swiper","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","activeIndex","pan","_animatedValueX","_animatedValueY","onPanResponderTerminationRequest","swipingEnabled","onAnimationStart","allow","direction","stopAutoplay","onPanResponderGrant","_fixState","event","gesture","correction","moveX","x0","moveY","y0","startAutoplay","actionMinWidth","onAnimationEnd","_changeIndex","_this2","addListener","removeAllListeners","_this3","autoplayTimeout","autoplay","setTimeout","moveUpDown","clearTimeout","down","arguments","undefined","setOffset","_this4","delta","move","skipChanges","calcDelta","loop","count","onIndexChanged","_this5","_event$nativeEvent$la","nativeEvent","layout","_this6","_this$state","_this$props","containerStyle","swipeAreaStyle","swipeWrapperStyle","dotElement","activeDotElement","prevButtonElement","prevButtonText","nextButtonElement","nextButtonText","buttonsEnabled","onLayout","_onLayout","bind","overRangeButtonsOpacity","Array","isArray","map","el","key","disabled","defaultProps","currentY","prevY","yScroll","SwipeableScroller","ScrollView","onScroll","contentOffset","_value","translateYInterp","scrollEnabled","paddingRight","paddingLeft","Swiper_Swiper","textAlaign","SwipeableList","AddPost","addTodo","text","alert","TextInput","editable","autoCorrect","blurOnSubmit","maxLength","multiline","numberOfLines","caretHidden","onChangeText","keyboardType","onChange","userInput","target","inputType","onSubmitEditing","returnKeyType","clearButtonMode","autoFocus","theme","colors","placeholder","primary","underlineColor","type","paddingBottom","extDecorationLine","Home","getUserData","asyncToGenerator","regenerator_default","mark","_callee","responded","jsonObj","wrap","_context","prev","next","mode","sent","JSON","stringify","stop","apply","components_Drawer","components_SwipeableScroller","KeyboardAvoidingView","display","behavior","enabled","felxDirection","components_AddPost","horizontal","Posts","nextProps","newPost","unshift","postItems","post","connect","items","fetchPosts","dispatch","payload","RouterElement","memo","react_router_dom","react_router","exact","path","component","Map","select","ios","android","star","App","vy","context","SafeAreaView","components_RouterElement","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.aa8cc81e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {Animated} from \"react-native\"\nexport const Context = React.createContext();\n\n\nexport function ContextController({ children }) {\n  let intialState = {\n    posts: [],\n    //data:[[0,1],[1,2]],\n    random: \"\",\n    yscroll: new Animated.Value(0),\n    //yscroll:0,\n    headerHeight:22,\n    loading: true,\n    data: [],\n    page: 1,\n    seed: 1,\n    error: null,\n    refreshing: false,\n    closedIndices:[],\n    index:0,\n    dataManipulated:false,\n    filteredData:[],\n    dy: new Animated.Value(0),\n    horizontalscroll:new Animated.Value(0),\n    opacity:1,\n    drawerToggle:true,\n    drawerAnimation:new Animated.Value(0),\n    translateY:new Animated.Value(0),\n    userData:{},\n    spinValue:new Animated.Value(0),\n  };\n\n  const [state, setState] = useState(intialState);\n\n  return (\n    <Context.Provider value={[state, setState]}>{children}</Context.Provider>\n  );\n}","import React from 'react'\n//import { Link } from 'react-router-dom'\nimport { BrowserRouter,HashRouter, Route, Link,Router,Switch } from \"react-router-dom\";\nimport {ScrollView} from 'react-native'\n//import Navigator from './Navigator'\n//import Catalogue from './screens/CatalogueScreen'\n//import Category from './screens/CategoryScreen'\n//import Product from './screens/ProductScreen'\nimport {SafeAreaView,KeyboardAvoidingView,Text,View,StyleSheet,Dimensions,TouchableOpacity} from 'react-native'\nconst NavBar = () => (\n  // <SafeAreaView>\n  //     <KeyboardAvoidingView             \n  //     style={{\n  //       height:22,\n  //       //backgroundColor:'#666666',\n  //       alignItems:'center',\n  //       justifyContent:'space-evenly',\n  //       flexDirection:'row',\n  //       flex:1,\n  //       fontSize:12,\n  //       margin:1,\n  //       borderColor:'#cfcfcf',\n  //       borderWidth:0,\n  //       // shadowColor: 'rgba(1, 1, 1, 1)',\n  //       // shadowOffset: {width: 0, height: 0},\n  //       // shadowRadius: 20,\n  //       backgroundColor:'#ffffff'\n  //     }}\n  //   >\n      <View style={{\n              //height:Dimensions.get('window').height/15,\n              //backgroundColor:'#666666',\n              alignItems:'center',\n              //justifyContent:'space-evenly',\n              //flexDirection:'row',\n              flexDirection:'column',\n              //flex:1,\n              // fontSize:12,\n              margin:1,\n              //borderColor:'#cfcfcf',\n              //borderWidth:0,\n              // shadowColor: 'rgba(1, 1, 1, 1)',\n              // shadowOffset: {width: 0, height: 0},\n              // shadowRadius: 20,\n              backgroundColor:'#ffffff'\n            }}>\n        {/* <View style={styles.box}>\n          <a id=\"linkHome\" \n            href=\"/\" \n            style={{\n              // color:'black', \n              flex:1,\n              textDecorationLine:'none',\n              //borderColor:'black',\n              //borderWidth:2,\n              color:'white',\n              //fontSize: 12,\n              textShadowColor: 'black',\n              textShadowOffset: {width: 0, height: 0},\n              textShadowRadius: 8,\n              alignItems:'center',\n              justifyContent:'center',\n              flexDirection:'row',\n              textAlign:'center'\n            }}>\n              <TouchableOpacity style={styles.touch}>\n              <Text\n            \n            style={{\n              // color:'black', \n              textDecorationLine:'none',\n              color:'white',\n              fontSize: 17,\n              textShadowColor: 'rgba(128, 128, 128, 1)',\n              textShadowOffset: {width: 0, height: 0},\n              textShadowRadius: 8,\n            }}>Home</Text>\n            </TouchableOpacity>\n            </a><br/>\n        </View> */}\n        <View style={styles.box}>\n        <a style={\n          {\n            flex:1,\n            textDecorationLine:'none',\n            //borderColor:'black',\n            //borderWidth:2,\n            color:'white',\n            fontSize: 17,\n            textShadowColor: 'rgba(128, 128, 128, 1)',\n            textShadowOffset: {width: 0, height: 0},\n            textShadowRadius: 8,\n            flex:1,\n            alignItems:'center',\n            justifyContent:'center',\n            flexDirection:'row',\n            textAlign:'center'\n          }\n        } href=\"/login/facebook\">\n          <TouchableOpacity style={styles.touch}>\n          <Text id=\"linkLoginFacebook\" \n          style={{\n            // color:'black', \n            textDecorationLine:'none',\n            color:'white',\n            fontSize: 17,\n            textShadowColor: 'rgba(128, 128, 128, 1)',\n            textShadowOffset: {width: 0, height: 0},\n            textShadowRadius: 8,\n            flex:1,\n            textAlign:'center',\n            alignItems:'center',\n            justifyContent:'center',\n            flexDirection:'row',\n          }}\n          >Login with Facebook</Text>\n          </TouchableOpacity>\n        </a><br/>\n        </View>\n        <View style={styles.box}>\n        <a style={\n          {\n            flex:1,\n            textDecorationLine:'none',\n            //borderColor:'black',\n            //borderWidth:2,\n            color:'white',\n            fontSize: 17,\n            textShadowColor: 'rgba(128, 128, 128, 1)',\n            textShadowOffset: {width: 0, height: 0},\n            textShadowRadius: 8,\n            flex:1,\n            alignItems:'center',\n            justifyContent:'center',\n            flexDirection:'row',\n            textAlign:'center'\n          }\n        } href=\"/login/google\">\n          <TouchableOpacity style={styles.touch}>\n          <Text id=\"linkLoginGoogle\" \n          style={{\n            // color:'black', \n            textDecorationLine:'none',\n            color:'white',\n            fontSize: 17,\n            textShadowColor: 'rgba(128, 128, 128, 1)',\n            textShadowOffset: {width: 0, height: 0},\n            textShadowRadius: 8,\n            flex:1,\n            textAlign:'center',\n            alignItems:'center',\n            justifyContent:'center',\n            flexDirection:'row',\n          }}\n          >Login with Google</Text>\n          </TouchableOpacity>\n        </a><br/>\n        </View>\n        {/* <View style={styles.box}>\n        <a style={\n          {\n            flex:1,\n            textDecorationLine:'none',\n            //borderColor:'black',\n            //borderWidth:2,\n            color:'white',\n            fontSize: 12,\n            textShadowColor: 'rgba(128, 128, 128, 1)',\n            textShadowOffset: {width: 0, height: 0},\n            textShadowRadius: 8,\n            flex:1,\n            alignItems:'center',\n            justifyContent:'center',\n            flexDirection:'row',\n            textAlign:'center'\n          }\n        } href=\"/login\">\n          <TouchableOpacity style={styles.touch}>\n          <Text id=\"linkLogin\" \n          style={{\n            // color:'black', \n            textDecorationLine:'none',\n            color:'white',\n            fontSize: 12,\n            textShadowColor: 'rgba(128, 128, 128, 1)',\n            textShadowOffset: {width: 0, height: 0},\n            textShadowRadius: 8,\n            flex:1,\n            textAlign:'center',\n            alignItems:'center',\n            justifyContent:'center',\n            flexDirection:'row',\n          }}\n          >Login</Text>\n          </TouchableOpacity>\n        </a><br/>\n        </View> */}\n        {/* <View style={styles.box}>\n          <Link id=\"linkTodo\" to=\"/todo\" style={{color:'black', textDecorationLine:'none',borderColor:'black',borderWidth:2}}>Todo</Link><br/>\n        </View> */}\n        {/* <View style={styles.box}>\n          <Link id=\"linkMap\" to=\"/map\" style={{color:'black', textDecorationLine:'none',borderColor:'black',borderWidth:2}}>Map</Link><br/>\n        </View>\n       */}\n          \n      \n      </View>\n  //   </KeyboardAvoidingView>\n  // </SafeAreaView>\n)\nconst styles = StyleSheet.create({\n  \n    box:{\n      margin:8,\n      //padding:1,\n      height:Dimensions.get(\"window\").height/9,\n      backgroundColor:'#ffffff',\n      alignItems:'center',\n      justifyContent:'center',\n      flexDirection:'row',\n      flex:1,\n      //fontSize:12,\n      //borderColor:'black',\n      //borderRadius:2,\n      color:'black',\n      // textShadowColor: 'rgba(1, 1, 1, 1)',\n      // textShadowOffset: {width: 0, height: 0},\n      // textShadowRadius: 20,\n      //borderColor:'#cfcfcf',\n      //borderWidth:1,\n    },\n    touch:{\n      margin:0,\n      //padding:1,\n      height:22,\n      backgroundColor:'transparent',\n      alignItems:'center',\n      justifyContent:'center',\n      flexDirection:'row',\n      flex:1\n    },\n    link:{\n      color:'black', \n      textDecorationLine:'none',\n      //borderColor:'black',\n      //borderWidth:1 \n    }\n        \n})\nexport default NavBar\n","import React, {Component,useContext,useEffect} from 'react'\nimport {View, Text, StyleSheet, TouchableOpacity , Image, Platform, Animated,Dimensions,Easing} from 'react-native'\nimport NavBar from './NavBar'\nimport {Context} from '../context'\nimport './css/Drawer.css'\nvar {name} =require( '../../package.json')\nconst SLIDING_DRAWER_WIDTH =300;\nconst maxHeight=50\nconst imageLength=30\nlet currentHeight=maxHeight\nconst Drawer =(props)=>{\n\n    const [state,setState]=useContext(Context)\n    const drawerInterp =state.drawerAnimation.interpolate(\n        {\n            inputRange:[0,1],\n            outputRange:[-SLIDING_DRAWER_WIDTH,0]\n        }\n    )\n    let translateYInterp = state.yscroll.interpolate(\n        {\n            inputRange:[-100,-51,-50,0,50,51,100],\n            outputRange:[100,-50,-50,0,50,50,50]\n        }\n    )\n    const ShowSlidingDrawer = ()=>\n    {\n        if(state.drawerToggle==true)\n        {\n            Animated.timing(\n                //this.Animation,\n                state.drawerAnimation,\n                {\n                    duration:500,\n                    toValue:1,\n                }\n            ).start(()=>\n            {\n                setState({...state,drawerToggle:false})\n                \n            })\n        }\n        else\n        {\n            Animated.timing(\n                state.drawerAnimation,\n                {\n                    duration:500,\n                    toValue:0, \n                }\n            ).start(()=>\n            {\n                setState({...state,drawerToggle:true})\n            })\n        }\n    }\n    useEffect(()=>{\n        //console.log(state.translateY._parent)\n        Animated.timing(state.spinValue,\n            {\n                toValue:360,\n                duration:3000,\n                easing:Easing.linear\n            }).start()\n    },[])\n    // const spin = state.spinValue.interpolate({\n    //     inputRange:[0,1],\n    //     ouputRange:['0deg','360deg']\n    // })\n    if(state.userData!=={}){\n        return(\n            <Animated.View style={{            \n                height:Dimensions.get('window').height-props.footerHeight,\n                width:Dimensions.get('window').width,\n                backgroundColor:'transparent',\n               \n            }}>\n                <View style={{\n                    backgroundColor:'#ffffff',\n                    borderColor:'#cfcfcf',\n                    borderRadius:2,\n                    borderWidth:1,\n                    height:maxHeight,\n                    justifyContent:'center',\n                    marginBottom :2,\n                    //opacity:state.opacity\n                }}>  \n                    <View className='spinner' style={{\n                        alignItems:'center',\n                        padding:0,\n                        height:maxHeight,\n                        position:'absolute',\n                        width:maxHeight,\n                        flex:1,\n                        justifyContent:'center',\n                        zIndex:'99',\n                    }}>\n                        <TouchableOpacity \n                            onPress = {ShowSlidingDrawer}\n                            style={{\n                                //backgroundColor:'black',\n                            }}>\n                            <Image source={require('./icons/96x96.png')} style={{\n                                Top:(maxHeight-imageLength)/2,\n                                position:'absolue',\n                                height:imageLength,\n                                resizeMode:'contain',\n                                width:imageLength,\n                                //Right:0\n                            }}/>\n                        </TouchableOpacity>\n                    </View>\n                    <View style={{\n                        alignItems:'center',\n                        zIndex:0,\n                    }}>\n                        <Text style ={styles.textStyle} >\n                            {name}\n                        </Text>\n                    </View> \n                </View> \n                {props.children}\n                <Animated.View style={[styles.ROOT_SLIDING_DRAWER_CONTAINER, {\n                    transform:[{\n                        translateX:drawerInterp\n                    },{\n                        translateY:maxHeight+2\n                    }]\n                    },\n                    {height:Dimensions.get('window').height*9/30-maxHeight}]}>\n                    <View style = {[styles.MAIN_SLIDING_DRAWER_CONTAINER,{height:Dimensions.get('window').height*9/30-maxHeight}]}>\n                        <NavBar/>\n                    </View>\n                </Animated.View> \n            </Animated.View>    \n        ) \n    }\n    else{\n        return(\n            <Animated.View style={{            \n                height:Dimensions.get('window').height-props.footerHeight,\n                width:Dimensions.get('window').width,\n                backgroundColor:'transparent',\n               \n            }}>\n                <View style={{\n                    backgroundColor:'#ffffff',\n                    borderColor:'#cfcfcf',\n                    borderRadius:2,\n                    borderWidth:1,\n                    height:maxHeight,\n                    justifyContent:'center',\n                    marginBottom :2,\n                    //opacity:state.opacity\n                }}>  \n                    <Animated.View style={{\n                        alignItems:'center',\n                        padding:0,\n                        height:maxHeight,\n                        position:'absolute',\n                        width:maxHeight,\n                        flex:1,\n                        justifyContent:'center',\n                        zIndex:'99',\n                        \n                    }}>\n                        <TouchableOpacity \n                            onPress = {ShowSlidingDrawer}\n                            style={{\n                                //backgroundColor:'black',\n                            }}>\n                            <Image source={require('./icons/96x96.png')} style={{\n                                Top:(maxHeight-imageLength)/2,\n                                position:'absolue',\n                                height:imageLength,\n                                resizeMode:'contain',\n                                width:imageLength,\n                                //Right:0\n                            }}/>\n                        </TouchableOpacity>\n                    </Animated.View>\n                    <View style={{\n                        alignItems:'center',\n                        zIndex:0,\n                    }}>\n                        <Text style ={styles.textStyle} >\n                            {name}\n                        </Text>\n                    </View> \n                </View> \n                {props.children}\n                <Animated.View style={[styles.ROOT_SLIDING_DRAWER_CONTAINER, {\n                    transform:[{\n                        translateX:drawerInterp\n                    },{\n                        translateY:maxHeight+2\n                    }]\n                    },\n                    {height:Dimensions.get('window').height*9/30-maxHeight}]}>\n                    <View style = {[styles.MAIN_SLIDING_DRAWER_CONTAINER,{height:Dimensions.get('window').height*9/30-maxHeight}]}>\n                        <NavBar/>\n                    </View>\n                </Animated.View> \n            </Animated.View>  \n        )\n    }\n    // if(-maxHeight<=state.yscroll._value && state.yscroll._value<0){\n    //     return(\n    //         <Animated.View style={{            \n    //             height:Dimensions.get('window').height-props.footerHeight+state.yscroll,\n    //             width:Dimensions.get('window').width,\n    //             backgroundColor:'transparent',\n    //             transform:[{\n    //                 //translateY:state.yscroll\n    //                 //translateY:100\n    //                 translateY:state.yscroll\n    //             }],\n    //         }}>\n    //             <View style={{\n    //                 backgroundColor:'#ffffff',\n    //                 borderColor:'#cfcfcf',\n    //                 borderRadius:2,\n    //                 borderWidth:1,\n    //                 height:maxHeight,\n    //                 justifyContent:'center',\n    //                 marginBottom :2,\n    //                 opacity:state.opacity\n    //             }}>  \n    //                 <View style={{\n    //                     alignItems:'center',\n    //                     padding:0,\n    //                     height:maxHeight,\n    //                     position:'absolute',\n    //                     width:maxHeight,\n    //                     flex:1,\n    //                     justifyContent:'center',\n    //                     zIndex:'99',\n    //                 }}>\n    //                     <TouchableOpacity \n    //                         onPress = {ShowSlidingDrawer}\n    //                         style={{\n    //                             //backgroundColor:'black',\n    //                         }}>\n    //                         <Image source={require('./icons/96x96.png')} style={{\n    //                             Top:(maxHeight-imageLength)/2,\n    //                             position:'absolue',\n    //                             height:imageLength,\n    //                             resizeMode:'contain',\n    //                             width:imageLength,\n    //                             //Right:0\n    //                         }}/>\n    //                     </TouchableOpacity>\n    //                 </View>\n    //                 <View style={{\n    //                     alignItems:'center',\n    //                     zIndex:0,\n    //                 }}>\n    //                     <Text style ={styles.textStyle} >\n    //                         {name}\n    //                     </Text>\n    //                 </View> \n    //             </View> \n    //             {props.children}\n    //             <Animated.View style={[styles.ROOT_SLIDING_DRAWER_CONTAINER, {\n    //                 transform:[{\n    //                     translateX:drawerInterp\n    //                 },{\n    //                     translateY:maxHeight\n    //                 }],\n    //                 height:Dimensions.get('window').height-currentHeight-props.footerHeight,\n    //                 }]}>\n    //                 <View style = {styles.MAIN_SLIDING_DRAWER_CONTAINER}>\n    //                     <NavBar/>\n    //                 </View>\n    //             </Animated.View> \n    //         </Animated.View>    \n    //     ) \n    // }\n    // else if(0<=state.yscroll._value){\n    //     return(\n    //         <Animated.View style={{            \n    //             height:Dimensions.get('window').height-props.footerHeight,\n    //             width:Dimensions.get('window').width,\n    //             backgroundColor:'transparent',\n    //             transform:[{\n    //                 //translateY:state.yscroll\n    //                 //translateY:100\n    //                 translateY:0\n    //             }],\n    //         }}>\n    //             <View style={{\n    //                 backgroundColor:'#ffffff',\n    //                 borderColor:'#cfcfcf',\n    //                 borderRadius:2,\n    //                 borderWidth:1,\n    //                 height:maxHeight,\n    //                 justifyContent:'center',\n    //                 marginBottom :2,\n    //                 opacity:state.opacity\n    //             }}>  \n    //                 <View style={{\n    //                     alignItems:'center',\n    //                     padding:0,\n    //                     height:maxHeight,\n    //                     position:'absolute',\n    //                     width:maxHeight,\n    //                     flex:1,\n    //                     justifyContent:'center',\n    //                     zIndex:'99',\n    //                 }}>\n    //                     <TouchableOpacity \n    //                         onPress = {ShowSlidingDrawer}\n    //                         style={{\n    //                             //backgroundColor:'black',\n    //                         }}>\n    //                         <Image source={require('./icons/96x96.png')} style={{\n    //                             Top:(maxHeight-imageLength)/2,\n    //                             position:'absolue',\n    //                             height:imageLength,\n    //                             resizeMode:'contain',\n    //                             width:imageLength,\n    //                             //Right:0\n    //                         }}/>\n    //                     </TouchableOpacity>\n    //                 </View>\n    //                 <View style={{\n    //                     alignItems:'center',\n    //                     zIndex:0,\n    //                 }}>\n    //                     <Text style ={styles.textStyle} >\n    //                         {name}\n    //                     </Text>\n    //                 </View> \n    //             </View> \n    //             {props.children}\n    //             <Animated.View style={[styles.ROOT_SLIDING_DRAWER_CONTAINER, {\n    //                 transform:[{\n    //                     translateX:drawerInterp\n    //                 },{\n    //                     translateY:maxHeight\n    //                 }],\n    //                 height:Dimensions.get('window').height-currentHeight-props.footerHeight,\n    //                 }]}>\n    //                 <View style = {styles.MAIN_SLIDING_DRAWER_CONTAINER}>\n    //                     <NavBar/>\n    //                 </View>\n    //             </Animated.View> \n    //         </Animated.View>    \n    //     ) \n    // }\n    // else if(state.yscroll._value<(-maxHeight)){\n    //     return(\n    //         <Animated.View style={{            \n    //             height:Dimensions.get('window').height-props.footerHeight-maxHeight,\n    //             width:Dimensions.get('window').width,\n    //             backgroundColor:'transparent',\n    //             transform:[{\n    //                 //translateY:state.yscroll\n    //                 //translateY:100\n    //                 translateY:-maxHeight\n    //             }],\n    //         }}>\n    //             <View style={{\n    //                 backgroundColor:'#ffffff',\n    //                 borderColor:'#cfcfcf',\n    //                 borderRadius:2,\n    //                 borderWidth:1,\n    //                 height:maxHeight,\n    //                 justifyContent:'center',\n    //                 marginBottom :2,\n    //                 opacity:state.opacity\n    //             }}>  \n    //                 <View style={{\n    //                     alignItems:'center',\n    //                     padding:0,\n    //                     height:maxHeight,\n    //                     position:'absolute',\n    //                     width:maxHeight,\n    //                     flex:1,\n    //                     justifyContent:'center',\n    //                     zIndex:'99',\n    //                 }}>\n    //                     <TouchableOpacity \n    //                         onPress = {ShowSlidingDrawer}\n    //                         style={{\n    //                             //backgroundColor:'black',\n    //                         }}>\n    //                         <Image source={require('./icons/96x96.png')} style={{\n    //                             Top:(maxHeight-imageLength)/2,\n    //                             position:'absolue',\n    //                             height:imageLength,\n    //                             resizeMode:'contain',\n    //                             width:imageLength,\n    //                             //Right:0\n    //                         }}/>\n    //                     </TouchableOpacity>\n    //                 </View>\n    //                 <View style={{\n    //                     alignItems:'center',\n    //                     zIndex:0,\n    //                 }}>\n    //                     <Text style ={styles.textStyle} >\n    //                         {name}\n    //                     </Text>\n    //                 </View> \n    //             </View> \n    //             {props.children}\n    //             <Animated.View style={[styles.ROOT_SLIDING_DRAWER_CONTAINER, {\n    //                 transform:[{\n    //                     translateX:drawerInterp\n    //                 },{\n    //                     translateY:maxHeight\n    //                 }],\n    //                 height:Dimensions.get('window').height-currentHeight-props.footerHeight,\n    //                 }]}>\n    //                 <View style = {styles.MAIN_SLIDING_DRAWER_CONTAINER}>\n    //                     <NavBar/>\n    //                 </View>\n    //             </Animated.View> \n    //         </Animated.View>    \n    //     ) \n    // }\n     \n} \nexport default Drawer\nconst styles=StyleSheet.create(\n    {\n        MAIN_SLIDING_DRAWER_CONTAINER:{\n            backgroundColor:'#ffffff',\n            borderColor:\"#cacaca\",\n            borderRadius:2,\n            borderWidth:1,\n            flex:1,\n            paddingHorizontal:10,\n            zIndex:1,\n            padding:5,\n        },\n        MainContainer:\n        {\n            top:0\n        },\n        ROOT_SLIDING_DRAWER_CONTAINER:\n        {\n            bottom:0,\n            flexDirection:'row',\n            left:0,\n            position:'absolute',\n            top:(Platform.OS==='ios')? 20:0,\n            width:SLIDING_DRAWER_WIDTH,\n            zIndex:99,\n            backgroundColor:'white'\n        },\n        textStyle:{\n            color:'white',\n            fontSize: 19,\n            textShadowColor: 'rgba(128, 128, 128, 1)',\n            textShadowOffset: {width: 0, height: 0},\n            textShadowRadius: 8,\n        },\n    }\n)\n\n// class Drawer extends Component{\n//     // maxheight=22\n//     constructor(props){\n//         super(props)\n//         this.Animation = new Animated.Value(0)\n//         this.Sliding_Drawer_Toggle = true;\n//         this.scroller=React.createRef()\n//         this.maxheight=50\n//         this.imageLength=30\n//         this.state = {\n//             dy:new Animated.Value(0),\n//             height:this.maxheight,\n//             lastscroll:0,\n//             maxheight:this.maxheight,\n//             opacity:new Animated.Value(1),\n//             yscroll: new Animated.Value(0),\n//         };\n//         this.state.yscroll.addListener(({value})=>{\n//             //console.log(value)\n//             // this.scroller.current.scrollTo({\n//             //     y:-1*value\n//             // })\n//             // this.forceUpdate()     \n//         })\n//     }\n//     static defaultProps ={\n//         footerHeight:2\n//     }\n//     UNSAFE_componentWillReceiveProps(nextProps){\n//         //console.log(nextProps)\n//         //this.setState({...this.state,height:nextProps.style.height})\n//         var maxheight = this.state.maxheight\n//         var limit=maxheight\n        \n//         // console.log(height)\n//         // console.log(height-nextProps.yscroll)\n//         // console.log(height-nextProps.yscroll/height)\n        \n//             this.setState({opacity:((limit-nextProps.yscroll)/limit),height:maxheight-(maxheight*(nextProps.yscroll/(limit*5)))})\n//             //console.log(this.props.scrollValue)\n//             //this.opacity.setValue((this.height-this.props.scrollValue._value)/this.height)\n        \n//        // console.log(this.state)\n\n//     }\n//     ShowSlidingDrawer = ()=>\n//     {\n       \n//         if(this.Sliding_Drawer_Toggle==true)\n//         {\n            \n//             Animated.timing(\n//                 this.Animation,\n//                 {\n//                     duration:500,\n//                     toValue:1,\n//                 }\n//             ).start(()=>\n//             {\n//                 this.Sliding_Drawer_Toggle=false;\n//             })\n//         }\n//         else\n//         {\n          \n//             Animated.timing(\n//                 this.Animation,\n//                 {\n//                     duration:500,\n//                     toValue:0, \n//                 }\n//             ).start(()=>\n//             {\n//                 this.Sliding_Drawer_Toggle=true;\n//             })\n//         }\n//     }\n//     render(){\n//         const ANIMATION_INTERPOLATE =this.Animation.interpolate(\n//             {\n//                 inputRange:[0,1],\n//                 outputRange:[-SLIDING_DRAWER_WIDTH,0]\n//             }\n//         )\n//         return(\n//             <View style={{            \n//                 height:Dimensions.get('window').height-this.props.footerHeight,\n//                 width:Dimensions.get('window').width,\n//                 backgroundColor:'transparent'\n//             }}>\n//                 <Animated.View style={\n//                 {\n//                     // alignItems:'center',\n//                     backgroundColor:'#ffffff',\n//                     borderColor:'#cfcfcf',\n//                     borderRadius:2,\n//                     borderWidth:1,\n//                     // flexDirection:'row',\n//                     height:this.state.height,\n//                     justifyContent:'center',\n//                     marginBottom :2,\n//                     opacity:this.state.opacity      \n//                 }\n//                 }>  \n//                     <View style={{\n//                         alignItems:'center',\n//                         // backgroundColor:'black',\n//                         padding:0,\n//                         height:this.maxheight,\n//                         //right:0,\n//                         position:'absolute',\n//                         width:this.maxheight,\n//                         flex:1,\n//                         justifyContent:'center',\n//                         zIndex:'99',\n//                     }}>\n//                         <TouchableOpacity \n//                             onPress = {this.ShowSlidingDrawer}\n//                             style={{\n//                                 //backgroundColor:'black',\n//                             }}>\n//                             <Image source={require('./icons/96x96.png')} style={{\n//                                 Top:(this.maxheight-this.imageLength)/2,\n//                                 position:'absolue',\n//                                 height:this.imageLength,\n//                                 resizeMode:'contain',\n//                                 width:this.imageLength,\n//                                 //Right:0\n//                             }}/>\n//                         </TouchableOpacity>\n//                     </View>\n//                     <View style={{\n//                         alignItems:'center',\n//                         zIndex:0,\n//                     }}>\n//                         <Text style ={styles.textStyle} >\n//                             {name}\n//                         </Text>\n//                     </View> \n//                 </Animated.View> \n//                 {this.props.children}\n//                 <Animated.View style={[styles.ROOT_SLIDING_DRAWER_CONTAINER, {\n//                     transform:[{\n//                         translateX:ANIMATION_INTERPOLATE\n//                         //translateX:0\n//                     },{\n//                         translateY:this.state.height\n//                     }],\n//                     height:Dimensions.get('window').height-this.state.height-this.props.footerHeight,\n                    \n//                     }]}>\n//                     <View style = {styles.MAIN_SLIDING_DRAWER_CONTAINER}>\n//                         {/* <Text style ={styles.TextStyle}>another put stuff here placeholder </Text> */}\n//                         <NavBar/>\n//                     </View>\n//                 </Animated.View>\n                \n                \n                \n                \n//             </View>\n            \n//         )\n\n        \n//     }\n// } \n// export default Drawer\n// const styles=StyleSheet.create(\n//     {\n//         MAIN_SLIDING_DRAWER_CONTAINER:{\n//             //alignItems:'center',\n//             backgroundColor:'#ffffff',\n//             borderColor:\"#cacaca\",\n//             borderRadius:2,\n//             borderWidth:1,\n//             flex:1,\n//             //justifyContent: 'center',\n//             paddingHorizontal:10,\n//             zIndex:1,\n//             padding:5,\n//         },\n//         MainContainer:\n//         {\n//             top:0\n//         },\n//         ROOT_SLIDING_DRAWER_CONTAINER:\n//         {\n//             bottom:0,\n//             flexDirection:'row',\n//             left:0,\n//             position:'absolute',\n//             top:(Platform.OS==='ios')? 20:0,\n//             width:SLIDING_DRAWER_WIDTH,\n//             // margin:4,\n//             // padding:1,\n//             zIndex:99,\n//         },\n//         textStyle:{\n//             color:'white',\n//             fontSize: 19,\n//             textShadowColor: 'rgba(128, 128, 128, 1)',\n//             textShadowOffset: {width: 0, height: 0},\n//             textShadowRadius: 8,\n//             //height:this.maxheight\n//             //textAlign: 'center',\n//             // textShadowColor: 'rgba(1, 1, 1, 1)',\n//             // textShadowOffset: {width: 0, height: 0},\n//             // textShadowRadius: 20\n//         },\n\n//     }\n// )","import React,{useContext,Component,PureComponent} from 'react'; \n//import {WholeContext} from \"../WholeContext\"\nimport {Text,View,Animated} from 'react-native'\n//import MenuDrawer from 'react-native-side-drawer'\nimport {Context} from '../context'\nimport Drawer from './Drawer'\nvar {name} =require( '../../package.json')\n\n\n\n\n\nclass Header extends PureComponent {\n    //const [state, setState] = useContext(Context);\n    maxheight=22\n    constructor(props) {\n        super(props);\n        this.scroller=React.createRef()\n        this.state = {\n            dy:new Animated.Value(0),\n            height:this.maxheight,\n            lastscroll:0,\n            maxheight:this.maxheight,\n            opacity:new Animated.Value(1),\n            yscroll: new Animated.Value(0),\n        };\n        this.state.yscroll.addListener(({value})=>{\n            //console.log(value)\n            // this.scroller.current.scrollTo({\n            //     y:-1*value\n            // })\n            // this.forceUpdate()     \n        })\n    }\n    \n    \n    // opacity= new Animated.Value(1)\n    // if(state.yscroll>22){\n    //     opacity=0\n    // }\n    UNSAFE_componentWillReceiveProps(nextProps){\n        //console.log(nextProps)\n        //this.setState({...this.state,height:nextProps.style.height})\n        var maxheight = this.state.maxheight\n        var limit=maxheight\n        \n        // console.log(height)\n        // console.log(height-nextProps.yscroll)\n        // console.log(height-nextProps.yscroll/height)\n        \n            this.setState({opacity:((limit-nextProps.yscroll)/limit),height:maxheight-(maxheight*(nextProps.yscroll/(limit*5)))})\n            //console.log(this.props.scrollValue)\n            //this.opacity.setValue((this.height-this.props.scrollValue._value)/this.height)\n        \n       // console.log(this.state)\n\n    }\n    \n    //console.log(opacity)\n    render(){\n        return(\n            <View style={\n                // divStyle\n                {\n                    alignItems:'center',\n                    backgroundColor:'#ffffff',\n                    borderColor:'#cfcfcf',\n                    borderRadius:2,\n                    borderWidth:1,\n                    height:this.state.height,\n                    justifyContent:'center',\n                    marginBottom :2,\n                    opacity:this.state.opacity      \n                }\n            }>        \n                <Text style ={pStyle} >\n                    {name}\n                </Text>\n            </View>\n        \n        )\n    } \n};\n\nconst divStyle = {\n    alignItems:'center',\n    backgroundColor:'#ffffff',\n    borderColor:'#cfcfcf',\n    borderRadius:2,\n    borderWidth:1,\n    color:'black',\n    flex:1,\n    flexDirection:'row',\n    height:22,\n    justifyContent:'center',\n    margin:0,  \n};\n  const pStyle = {\n    color:'white',\n    fontSize: 12,\n    textShadowColor: 'rgba(128, 128, 128, 1)',\n    textShadowOffset: {width: 0, height: 0},\n    textShadowRadius: 8,\n    //textAlign: 'center',\n    // textShadowColor: 'rgba(1, 1, 1, 1)',\n    // textShadowOffset: {width: 0, height: 0},\n    // textShadowRadius: 20\n  };\n\n\nexport default (Header)","// import React, {memo,useContext} from 'react'\n// import {Text,View,Dimensions,ScrollView,PanResponder,Animated} from 'react-native'\n// import {Context} from '../context'\n\nimport React,{Component} from 'react'\nimport {\n  StyleSheet, \n  View, \n  ViewPropTypes,\n  Text,\n  Animated, \n  PanResponder,\n  TouchableOpacity,\n  Dimensions\n} from 'react-native'\nimport PropTypes from \"prop-types\"\nconst width = Dimensions.get('window').width\nconst height = Dimensions.get('window').height\nconst animatedValue = new Animated.Value(0);\nconst styles = StyleSheet.create({\n  activeDotStyle: {\n    backgroundColor: '#007aff',\n    borderRadius: 4,\n    height: 8,\n    marginBottom: 3,\n    marginLeft: 3,\n    marginRight: 3,\n    marginTop: 3,\n    width: 8,\n  },\n  container: {\n    backgroundColor: \"transparent\",\n    flex: 1,\n  },\n  controlsWrapperStyle: {\n    alignItems: \"center\",\n    bottom: 0,\n    justifyContent: \"space-between\",\n    padding: 10,\n    position: \"absolute\",\n    right: 0,\n  },\n  dotStyle: {\n    backgroundColor: 'rgba(0,0,0,.2)',\n    borderRadius: 4,\n    height: 8,\n    marginBottom: 3,\n    marginLeft: 3,\n    marginRight: 3,\n    marginTop: 3,\n    width: 8,\n  },\n  dotsWrapperStyle: {\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  nextButtonStyle: {\n    color: '#007aff'\n  }, \n  prevButtonStyle: {\n    color: '#777777'\n  },\n  sliderContainer: {\n    backgroundColor: \"transparent\",\n    flex: 1,\n    overflow: \"hidden\",\n    position: \"relative\", \n  },\n});\n\nexport default class HorizontalSwipeElements extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeIndex: props.index,\n      height: 200,\n      pan: new Animated.ValueXY(),\n      width: Dimensions.get('window').width,\n    };\n    this._animatedValueX=0;  \n    this._animatedValueY=0;\n    this._panResponder = PanResponder.create({\n      // onMoveShouldSetPanResponderCapture:()=>true,\n      onMoveShouldSetPanResponderCapture:(e,gestureState)=>{\n       return(Math.abs(gestureState.dx)>5)\n      },\n      onPanResponderGrant:(e,gestureState)=>{this._fixState()},\n      onPanResponderMove:Animated.event([\n        null, {dx:this.state.pan.x}\n      ]),\n      onPanResponderRelease:(e,gesture)=>{\n        const correction=gesture.moveX-gesture.x0\n        if(Math.abs(correction)<(this.state.width*this.props.actionMinWidth)){\n          return Animated.spring(this.state.pan,{toVlue:{x:0,y:0}}).start(()=>{\n            if(this.props.onAnimationEnd){\n              this.props.onAnimationEnd(this.state.activeIndex);\n            }\n          })\n          this._changeIndex(correction>0 ? -1 :1)\n        }\n      },\n      onPanResponderTerminationRequest:()=>false,\n    })\n  }\n  componentDidMount(){\n    this.state.pan.x.addListener((value)=> this._animatedValueX=value.value)\n    //this.startAutoplay()\n  }\n  componentWillUnmount(){\n    //this.stopAutoplay()\n    this.state.pan.x.removeAllListeners()\n  }\n  _fixState(){\n    this._animatedValueX=this.state.width*this.state.activeIndex*-1\n    this.state.pan.setOffset({x:this._animatedValueX, y:0})\n    this.state.pan.setValue({x:0,y:0})\n  }\n  _changeIndex(delta=1){\n    let move = {x:0,y:0}\n    let skipChange=(!delta)\n    let calcDelta = delta\n    if(this.state.activeIndex<=0 && delta<0){\n      skipChange=(!this.props.loop)\n      calcDelta = this.count+delta\n    } else if(this.state.activeIndex+1>=this.cound &&delta>0){\n      skipChange=(!this.props.loop)\n      calcDelta=-1*this.state.activeIndex+delta-1\n    }\n    if(skipChange){\n      return Animated.spring(this.state.pan,{toValue:move}).start(()=>{\n        if(this.props.onAnimationEnd){\n          this.props.onAnimationEnd(this.state.activeIndex)\n        }\n      })\n    }\n    let index = this.state.activeIndex+calcDelta\n    this.setState({activeIndex:index})\n    move.x=this.state.width*-1*calcDelta\n    Animated.spring(this.state.pan,{toValue:move}).start(()=>{\n      if(this.props.onAnimationEnd){\n        this.props.onAnimationEnd(index)\n      }\n    })\n    //this.startAutoplay();\n    this.props.onIndexChanged && this.props.onIndexChanged(index)\n  }\n  _onLayout(e){\n    console.log(e.nativeEvent.layout)\n    const {width,height}=e.nativeEvent.layout\n    this.setState({width,height},()=>this._fixState())\n  }\n\n  render(){\n    const {pan,width,height,activeIndex}=this.state\n    const {\n      direction,\n      containerStyle,\n      swipeAreaStyle,\n      swipeWrapperStyle,\n      controlsWrapperStyle,\n      dotsWrapperStyle,\n      dotElement,\n      dotStyle,\n      activeDotElement,\n      activeDotStyle,\n      prevButtonElement,\n      prevButtonStyle,\n      prevButtonText,\n      nextButtonElement,\n      nextButtonStyle,\n      nextButtonText,\n      loop,\n      buttonsEnabled,\n    } = this.props;\n    if (!width){\n      return (<View style={[styles.container, containerStyle]} onLayout={this._onLayout.bind(this)}/>)\n    }\n    const overRangeButtonOpacity = !loop? this.props.overRangeButtonOpacity: this.props.overRangeButtonsOpacity|| 1;\n    let {children}=this.props;\n    if(!Array.isArray(children)){children=[children]}\n    this.count=children.length\n    return(\n      <View style={[styles.container,containerStyle]} onLayout={this._onLayout.bind(this)}>\n        <View style={[styles.sliderContainer,swipeAreaStyle]}>\n          <Animated.View\n            style={[{\n              position:\"relative\",\n              top:0,\n              left:0,\n            },swipeWrapperStyle,{\n              flexDirection:direction,\n              width:width*this.count*width,\n              height:height\n            },{transform:[{translateX:pan.x},{translateY:pan.y}]}\n            ]}\n            {...this._panResponder.panHandlers}\n            >\n              {children.map((el,i)=>(<View key={i} style={{width,height}}>{el}</View>))}\n          </Animated.View>\n        </View>\n      </View>\n    )\n  }\n}\n//     <Animated.View style={{\n//       position: \"relative\",\n//       top: 0,\n//       //left: _animatedValue._value,\n//       flexDirection: 'row',\n//       width: width*2,\n//       height: height,\n//       transform:[{translateX:_animatedValue._value}]\n//       }}\n//       {..._panResponder.panHandlers} \n//       horizontal = {true}>\n// <View style={{height:Dimensions.get('window').height/15,width:(Dimensions.get('window').height)/12,backgroundColor:'white',flex:1,flexDirection:'column',marginRight:2,marginLeft:3}}>\n// <Text selectable={false}>one</Text>\n// </View>\n// <View style={{height:Dimensions.get('window').height/15,width:(Dimensions.get('window').height)/12,backgroundColor:'lightgrey',flex:1,flexDirection:'column',marginRight:2,marginLeft:2}}>\n// <Text selectable={false}>two</Text>\n// </View>\n// <View style={{height:Dimensions.get('window').height/15,width:(Dimensions.get('window').height)/12,backgroundColor:'darkgrey',flex:1,flexDirection:'column',marginRight:2,marginLeft:2}}>\n// <Text selectable={false}>three</Text>\n// </View>\n// <View style={{height:Dimensions.get('window').height/15,width:(Dimensions.get('window').height)/12,backgroundColor:'black',flex:1,flexDirection:'column',marginRight:2,marginLeft:2}}>\n// <Text selectable={false}>four</Text>\n// </View>\n// <View style={{height:Dimensions.get('window').height/15,width:(Dimensions.get('window').height)/12,backgroundColor:'white', flex:1,flexDirection:'column',marginRight:2,marginLeft:2}}>\n// <Text selectable={false}>one</Text>\n// </View>\n// <View style={{height:Dimensions.get('window').height/15,width:(Dimensions.get('window').height)/12,backgroundColor:'lightgrey',flex:1,flexDirection:'column',marginRight:2,marginLeft:2}}>\n// <Text selectable={false}>two</Text>\n// </View>\n// <View style={{height:Dimensions.get('window').height/15,width:(Dimensions.get('window').height)/12,backgroundColor:'darkgrey',flex:1,flexDirection:'column',marginRight:2,marginLeft:2}}>\n// <Text selectable={false}>three</Text>\n// </View>\n// <View style={{height:Dimensions.get('window').height/15,width:(Dimensions.get('window').height)/12,backgroundColor:'black',flex:1,flexDirection:'column',marginRight:2,marginLeft:2}}>\n// <Text selectable={false}>four</Text>\n// </View>\n// </Animated.View>\n//   )\n\n// }\n\n","import React,{Component,useContext} from 'react';\nimport {Animated,PanResponder,Dimensions,View,Text,Image,TouchableOpacity} from 'react-native'\nimport { Context } from \"../context\";\n\n// export class SwipeableCard extends Component {\n   \n//     translateX = new Animated.Value(0);\n//     _panResponder = PanResponder.create({\n//       onMoveShouldSetResponderCapture: () => true,\n//       onMoveShouldSetPanResponderCapture: () => true,\n//       onPanResponderMove: Animated.event([null, {dx: this.translateX}]),\n//       onPanResponderRelease: (e, {vx, dx}) => {\n//         //const [state, setState] = useContext(Context);\n\n//         const screenWidth = Dimensions.get(\"window\").width;\n//         if (Math.abs(vx) >= 0.5 || Math.abs(dx) >= 0.5 * screenWidth) {\n//           Animated.timing(this.translateX, {\n//             toValue: dx > 0 ? screenWidth : -screenWidth,\n//             duration: 200\n//           }).start(this.props.onDismiss);\n//           //console.log(\"yo this element's index was \"+this.props.name_first)\n//           //setState()\n//         } else {\n//           Animated.spring(this.translateX, {\n//             toValue: 0,\n//             bounciness: 10\n//           }).start();\n//         }\n//       }\n//     });\n//     onPress(){\n        \n//         //console.log(this.state)\n//     }\n//     render() {\n//     //const [state, setState] = useContext(Context);\n//       return (\n//         <View>\n//             <Animated.View\n//                 style={{transform: [{translateX: this.translateX}], height: 75}} {...this._panResponder.panHandlers}\n//             >\n//                 {/* <Text>\n//                     {this.props.title}\n//                 </Text> */}\n//                 <TouchableOpacity onPress={\n//                     console.log(this.props)\n                    \n//                 }>\n//                     <View \n//                     style={{\n//                         flex:1,\n//                         flexDirection:'row'\n//                     }}\n//                     >\n//                     <View>\n//                     <Image\n//                         style={{width: 50, height: 50}}\n//                         source={{uri: this.props.picture}}\n//                     />\n//                     </View>\n//                     <View>\n//                     <Text selectable={false}>\n//                         {String(this.props.name_first) +\" \" +String(this.props.name_last)}\n//                     </Text>\n//                     <Text selectable={false}>\n//                         {this.props.email}\n//                     </Text>\n//                     </View>\n//                     </View>\n//                 </TouchableOpacity>\n//             </Animated.View>\n//         </View>\n  \n//       );\n//     }\n//   }\n\nconst SwipeableCard = (props) => {\n    const [state, setState] = useContext(Context);\n    // const dismiss= (itemIndex)=>{\n    //   var filtered= []\n    //   var appliedIndex=0\n    //   for (var i = 0; i<state.data.length; i++){\n    //     if(itemIndex!=i){\n    //       filtered.push({...state.data[i],index:appliedIndex})\n    //       appliedIndex++\n    //     }\n    //   }\n\n    //   console.log(filtered)\n    //   setState({\n    //     ...state,\n    //     data:[...filtered]\n    //   })\n      \n    // }\n    const dismiss= (itemIndex)=>{\n      // console.log('dismiss fired')\n      // setState({\n      //   ...state,\n      //   refreshing:true\n      // })\n      \n      \n        // var filtered= []\n        // for (var i = 0; i<state.data.length; i++){\n        //   if(itemIndex!=i){\n        //     filtered.push({...state.data[i],index:i})\n        //   }\n        // }\n        //console.log(translateX)\n        \n        var filtered =state.filteredData.filter(item => item.index !== itemIndex);\n        // for (var i=0;i<filtered.length;i++){\n        //   filtered[i].index=i\n        // }\n        // console.log(filtered)\n        setState({\n          ...state,\n          filteredData:[...filtered],\n          dataManipulated:true,\n          refreshing:false\n        })\n        //console.log(state.filteredData)\n        \n    }\n    const style={\n      height:Dimensions.get('window').height/11,\n\n    }\n    //const [userInput,setUserInput,Refs] = useState(\"\")\n    const dragPos = new Animated.ValueXY({x:0,y:style.height});\n    const translateX = new Animated.Value(0);\n    const translateY=new Animated.Value(0)\n    const _panResponder = PanResponder.create({\n      onMoveShouldSetResponderCapture: () => true,\n      onMoveShouldSetPanResponderCapture: () => true,\n      onPanResponderMove: (e,gestureState)=>{\n        //translateX.setValue(gestureState.dx)\n        //Animated.event([null, {dx: translateX}])\n        dragPos.setValue({x:gestureState.dx,y:style.height})\n        //translateY.setValue(state.dy._value+gestureState.dy)\n        //console.log(translateX._value)\n        //console.log(position.x._value +\" : \"+position.y._value)\n        //setState({...state,dy:translateY})\n        //console.log(state.dy)\n      } ,\n      // onPanResponderRelease: (e, {vx, dx}) => {\n      //   //const [state, setState] = useContext(Context);\n      //   console.log(dx)\n      //   const screenWidth = Dimensions.get(\"window\").width;\n      //   if (Math.abs(vx) >= 0.5 || Math.abs(dx) >= 0.5 * screenWidth) {\n      //     Animated.timing(translateX, {\n      //       toValue: dx > 0 ? screenWidth : -screenWidth,\n      //       duration: 200\n      //     // }).start(props.onDismiss);\n      //   }).start(\n          \n      //     dismiss(props.index)\n          \n      //     );\n      //     //console.log(\"yo this element's index was \"+props.name_first)\n      //     //setState()\n      //   } else {\n      //     Animated.spring(translateX, {\n      //       toValue: 0,\n      //       bounciness: 10\n      //     }).start();\n      //   }\n      // }\n      onPanResponderRelease: (e, {vx, dx}) => {\n        //const [state, setState] = useContext(Context);\n        //console.log(dx)\n        const screenWidth = Dimensions.get(\"window\").width;\n        if (Math.abs(vx) >= 0.35 || Math.abs(dx) >= 0.35 * screenWidth) {\n          Animated.sequence([\n            Animated.spring(dragPos, {\n              toValue: dx > 0 ? {x:screenWidth,y:style.height} : {x:-screenWidth,y:style.height },\n              duration: 250\n              \n            // }).start(props.onDismiss);\n          }),\n          Animated.spring(dragPos,{\n            toValue: dragPos.x > 0 ?{x:screenWidth,y:0} : {x:-screenWidth,y:0},\n            // duration:750\n          }).start(\n            ()=>\n            {\n              dismiss(props.index)\n              // Animated.timing(position, {\n              //   toValue: dx > 0 ? {x:screenWidth,y:0} : {x:-screenWidth,y:0 },\n              //   duration: 200\n              // }).start()\n            }\n            \n          )\n            //console.log(\"yo this element's index was \"+props.name_first)\n            //setState()\n          ])\n          \n        } else {\n          Animated.spring(dragPos, {\n            toValue: {x:0,y:style.height},\n            bounciness: 10\n          }).start();\n        }\n      }\n    });\n        const onPress=(e)=>{\n            console.log(props)\n        }\n    \n      return (\n      \n            <View>\n                <Animated.View\n                    style={{left:dragPos.x,height:dragPos.y,alignItems:'center',}} {..._panResponder.panHandlers}\n                >\n                    {/* <Text>\n                        {props.title}\n                    </Text> */}\n                    <View style={{width:Dimensions.get('window').width-4,background:'transparent'}}>\n                    <TouchableOpacity onPress={\n                        onPress\n                        \n                    }>\n                        <View \n                        style={{\n                            flex:1,\n                            flexDirection:'row',\n                            margin:2\n                            \n                        }}\n                        >\n                        <View>\n                          <Image\n                              style={{width: Dimensions.get('window').height/12, height: Dimensions.get('window').height/12,borderRadius:4}}\n                              source={{uri: props.picture}}\n                          />\n                        </View>\n                        <View style={{alignItems:'center',justifyContent:'center',flex:1,backgroundColor:'transparent'}}>\n                            <View style={{alignItems:'center',justifyContent:'center',backgroundColor:'transparent'}}>\n                              <Text selectable={false} style={{           \n                                textDecorationLine:'none',\n                                color:'white',\n                                fontSize: 15,\n                                textShadowColor: 'rgba(128, 128, 128, 1)',\n                                textShadowOffset: {width: 0, height: 0},\n                                textShadowRadius: 8,\n                                flex:1,\n                                textAlign:'center',\n                                alignItems:'center',\n                                justifyContent:'center',\n                                flexDirection:'row',\n                                margin:5,\n                              }}>\n                                  {String(props.name_first) +\" \" +String(props.name_last)}\n                              </Text>\n                              <Text selectable={false}\n                              style={{           \n                                textDecorationLine:'none',\n                                color:'white',\n                                fontSize: 15,\n                                textShadowColor: 'rgba(128, 128, 128, 1)',\n                                textShadowOffset: {width: 0, height: 0},\n                                textShadowRadius: 8,\n                                flex:1,\n                                textAlign:'center',\n                                alignItems:'center',\n                                justifyContent:'center',\n                                flexDirection:'row',\n                                margin:5,\n                              }}>\n                                  {props.email}\n                              </Text>\n                            </View>\n                            </View>\n                        </View>\n                    </TouchableOpacity>\n                  </View>\n                </Animated.View>\n            </View>\n      \n          \n      );\n};\n    \nexport default SwipeableCard;","//modified from\n//https://medium.com/react-native-development/how-to-use-the-flatlist-component-react-native-basics-92c482816fe6\nimport React, { Component,pureComponent,memo ,useContext,useEffect} from \"react\";\nimport { View, Text, FlatList, ActivityIndicator ,Image, LayoutAnimation,UIManager} from \"react-native\";\nimport SwipeableCard from \"./SwipeableCard\";\n\n//import { List, ListItem, SearchBar } from \"react-native-elements\";\nimport { Context } from \"../context\";\n\n\n// class DefaultFlatList extends Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       loading: false,\n//       data: [],\n//       page: 1,\n//       seed: 1,\n//       error: null,\n//       refreshing: false,\n//       closedIndices:[],\n//       index:0\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.makeRemoteRequest();\n//     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n  \n//   }\n\n//   makeRemoteRequest = () => {\n//     const { page, seed } = this.state;\n//     const url = `https://randomuser.me/api/?seed=${seed}&page=${page}&results=20`;\n//     this.setState({ loading: true });\n\n//     fetch(url)\n//       .then(res => res.json())\n//       .then(res => {\n//         //console.log(res.results)\n//         var copy =[...res.results]\n//         var indexed =[]\n//         for (var i =0; i<copy.length;i++){\n//           indexed[i]={...copy[i],index:i}\n//         }\n//         console.log(indexed)\n//         this.setState({\n//           //data: page === 1 ? res.results : [...this.state.data, ...res.results],\n//           data:[...this.state.data,...indexed],\n//           error: res.error || null,\n//           loading: false,\n//           refreshing: false\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ error, loading: false });\n//       });\n      \n//   };\n\n//   handleRefresh = () => {\n//     this.setState(\n//       {\n//         page: 1,\n//         seed: this.state.seed + 1,\n//         refreshing: true\n//       },\n//       () => {\n//         this.makeRemoteRequest();\n//       }\n//     );\n//   };\n\n//   handleLoadMore = () => {\n//     this.setState(\n//       {\n//         page: this.state.page + 1\n//       },\n//       () => {\n//         this.makeRemoteRequest();\n//       }\n//     );\n//   };\n\n//   renderSeparator = () => {\n//     return (\n//       <View\n//         style={{\n//           height: 1,\n//           width: \"86%\",\n//           backgroundColor: \"#CED0CE\",\n//           marginLeft: \"14%\"\n//         }}\n//       />\n//     );\n//   };\n\n//   renderHeader = () => {\n//     return <View><Text> note </Text></View>;\n//   };\n\n//   renderFooter = () => {\n//     if (!this.state.loading) return null;\n\n//     return (\n//       <View\n//         style={{\n//           paddingVertical: 20,\n//           borderTopWidth: 1,\n//           borderColor: \"#CED0CE\"\n//         }}\n//       >\n//         <ActivityIndicator animating size=\"large\" />\n//       </View>\n//     );\n//   };\n//   shouldRender(index) {\n//     return this.state.closedIndices.indexOf(index) === -1\n//     LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n//   }\n  \n//   render() {\n//     // var filtered=[]\n//     // for (var i = 0; i<this.state.data.length; i++){\n//     //     filtered.push({...this.state.data[i],index:i})\n//     // }\n//     // this.setState({...this.state,data:filtered})\n//     if(this.state.loading==true||this.state.refreshing){\n//       return (\n//         <ActivityIndicator animating size=\"large\" color/>\n//       )\n//     }\n//     else{\n//       return (\n        \n//         <View style={{ \n//           borderTopWidth: 0, \n//           borderBottomWidth: 0, \n//           }}>\n         \n             \n//               <FlatList\n                \n//                 data={this.state.data}\n//                 renderItem={({ item }) => (\n//                   // <View \n//                   //   style={{\n//                   //     flex:1,\n//                   //     flexDirection:'row'\n//                   //   }}\n//                   // >\n//                   //   <View>\n//                   //   <Image\n//                   //     style={{width: 50, height: 50}}\n//                   //     source={{uri: item.picture.thumbnail}}\n//                   //   />\n//                   //   </View>\n//                   //   <View>\n//                   //   <Text>\n//                   //     {String(item.name.first) +\" \" +String(item.name.last)}\n//                   //   </Text>\n//                   //   <Text>\n//                   //     {item.email}\n//                   //   </Text>\n//                   //   </View>\n//                   // </View>\n                  \n                  \n//                   //https://stackoverflow.com/questions/53655722/react-native-flatlist-conditional-rendering\n//                   //flatlist seems to not support conditional rendering\n  \n//                   // <SwipeableCard title={String(item.name.first) +\" \" +String(item.name.last)} onDismiss={() => {\n//                   <SwipeableCard index={item.index} name_first={String(item.name.first)} name_last = {String(item.name.last)} picture={item.picture.thumbnail} email={item.email}  onDismiss={() => { \n//                     // if ([...new Array(this.state.data.length)].slice(i + 1, this.state.data.length).some(this.shouldRender)) {\n//                     //   LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n//                     // }\n                    \n//                     //LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n//                     // var filtered=this.state.data.filter(function(value, index, arr){\n//                     //   console.log(value)\n//                     //   return value.index != index;\n//                     // });\n//                     this.setState({\n//                       ...this.state,\n//                       refreshing:true\n//                     })\n//                     var filtered= []\n                    \n//                     for (var i = 0; i<this.state.data.length; i++){\n//                       if(item.index!=i){\n//                         filtered.push({...this.state.data[i],index:i})\n//                       }\n         \n//                     }\n//                     this.setState({\n//                       //closedIndices: [...this.state.closedIndices, i]\n//                       ...this.state,\n//                       data:[...filtered]\n//                     })\n//                     this.setState({\n//                       ...this.state,\n//                       refreshing:false\n//                     })\n//                     // filtered=[]\n//                     // for (var i = 0; i<this.state.data.length; i++){\n                      \n//                     //   filtered.push(this.state.data[i].name.first)\n                      \n//                     // }\n//                     //console.log(filtered)\n//                     //this.forceUpdate()\n//                     //console.log(this.state.data)\n//                   }}/>\n//                 )}\n//             keyExtractor={item => item.index}\n//             //ItemSeparatorComponent={this.renderSeparator}\n//             //ListHeaderComponent={this.renderHeader}\n//             //ListFooterComponent={this.renderFooter}\n//             scrollEventThrottle={16}\n//             onRefresh={this.handleRefresh}\n//             refreshing={this.state.refreshing}\n//             //onEndReached={this.handleLoadMore}\n//             onEndReachedThreshold={50}\n//           />\n//         </View>\n//       );\n//     }\n    \n//   }\n// }\n\n// export default DefaultFlatList;\n\n\n\nconst DefaultFlatList =(props)=> {\n  const [state, setState] = useContext(Context);\n\n  useEffect(()=>{\n    \n    const makeRemoteRequest = (seed,page) => {\n        const url = `https://randomuser.me/api/?seed=${seed}&page=${page}&results=20`;\n        //setState({ loading: true });\n    \n        fetch(url)\n          .then(res => res.json())\n          .then(res => {\n            //console.log(res.results)\n            var copy =[...res.results]\n            var indexed =[]\n            for (var i =0; i<copy.length;i++){\n              indexed[i]={...copy[i],index:i}\n            }\n          \n            setState({\n              //data: page === 1 ? res.results : [...state.data, ...res.results],\n              ...state,\n              data:[...state.data,...indexed],\n              filteredData:[...state.data,...indexed],\n              error: false,\n              loading: false,\n              refreshing: false\n            });\n          })\n          .catch(error => {\n            setState({ ...state,error:true, loading: false });\n          });\n        console.log('some how this ran')    \n    };\n    // console.log('useEffect fired in defaultFlatlist')\n    const { seed, page } = state;\n    if(state.loading==true){\n      var data = makeRemoteRequest(seed,page)\n      setState({...state,data:data})\n      console.log('if part fired')\n    }\n    else{\n      console.log(state.data)\n      console.log('else part is fired')\n    }\n    UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n  },[])\n  \n  \n\n  \n\n  const handleRefresh = () => {\n    // setState(\n    //   {\n    //     ...state,\n    //     page: 1,\n    //     seed: state.seed + 1,\n    //     refreshing: true\n    //   },\n    //   () => {\n    //     //makeRemoteRequest();\n    //   }\n    // );\n    console.log('refresh fired')\n  };\n\n  const handleLoadMore = () => {\n    setState(\n      {\n        page: state.page + 1\n      },\n      () => {\n        //makeRemoteRequest();\n      }\n    );\n  };\n\n  const renderSeparator = () => {\n    return (\n      <View\n        style={{\n          height: 1,\n          width: \"86%\",\n          backgroundColor: \"#CED0CE\",\n          marginLeft: \"14%\"\n        }}\n      />\n    );\n  };\n\n  const renderHeader = () => {\n    return <View><Text> note </Text></View>;\n  };\n\n  const renderFooter = () => {\n    if (!state.loading) return null;\n\n    return (\n      <View\n        style={{\n          paddingVertical: 20,\n          borderTopWidth: 1,\n          borderColor: \"#CED0CE\"\n        }}\n      >\n        <ActivityIndicator animating size=\"large\" />\n      </View>\n    );\n  };\n  const shouldRender=(index)=> {\n    return state.closedIndices.indexOf(index) === -1\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n  }\n  \n  \n    // var filtered=[]\n    // for (var i = 0; i<state.data.length; i++){\n    //     filtered.push({...state.data[i],index:i})\n    // }\n    // setState({...state,data:filtered})\n  // if(state.loading==true||state.refreshing){\n  //     return (\n  //       <ActivityIndicator animating size=\"large\" color/>\n  //     )\n  //   }\n  \n  // else{\n    \n      return (\n        <View style={{ \n          borderTopWidth: 0, \n          borderBottomWidth: 0, \n          \n          }}>\n              <FlatList \n                data={state.data}\n                renderItem={({ item }) => (\n                  // <SwipeableCard index={item.index} name_first={String(item.name.first)} name_last = {String(item.name.last)} picture={item.picture.thumbnail} email={item.email} onDismiss={dismiss(item.index)}/>\n                  <SwipeableCard index={String(item.index)} name_first={String(item.name.first)} name_last = {String(item.name.last)} picture={item.picture.thumbnail} email={item.email}/>\n                )}\n            keyExtractor={item => item.index}\n            //ItemSeparatorComponent={renderSeparator}\n            //ListHeaderComponent={renderHeader}\n            //ListFooterComponent={renderFooter}\n            \n            scrollEventThrottle={1}\n            //onRefresh={handleRefresh}\n            //refreshing={state.refreshing}\n            //onEndReached={handleLoadMore}\n            onEndReachedThreshold={50}\n          />\n        </View>\n      );\n    //}\n    \n  \n}\n\n\nexport default DefaultFlatList","//directly downloaded from \n//https://github.com/oxyii/react-native-web-swiper\n\nimport React from \"react\";\nimport {\n    StyleSheet,\n    View,\n    ViewPropTypes,\n    Text,\n    Animated,\n    PanResponder,\n    TouchableOpacity,\n} from \"react-native\";\nimport PropTypes from \"prop-types\";\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: \"transparent\",\n    },\n    sliderContainer: {\n        backgroundColor: \"transparent\",\n        overflow: \"hidden\",\n        position: \"relative\",\n        flex: 1,\n    },\n    controlsWrapperStyle: {\n        position: \"absolute\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        right: 0,\n        bottom: 0,\n        padding: 10\n    },\n    dotsWrapperStyle: {\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    activeDotStyle: {\n        backgroundColor: '#007aff',\n        width: 8,\n        height: 8,\n        borderRadius: 4,\n        marginLeft: 3,\n        marginRight: 3,\n        marginTop: 3,\n        marginBottom: 3\n    },\n    dotStyle: {\n        backgroundColor: 'rgba(0,0,0,.2)',\n        width: 8,\n        height: 8,\n        borderRadius: 4,\n        marginLeft: 3,\n        marginRight: 3,\n        marginTop: 3,\n        marginBottom: 3\n    },\n    prevButtonStyle: {\n        color: '#777777'\n    },\n    nextButtonStyle: {\n        color: '#007aff'\n    },\n});\n\nexport default class Swiper extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            width: 0,\n            height: 0,\n            activeIndex: props.index,\n            pan: new Animated.ValueXY(),\n        };\n\n        this._animatedValueX = 0;\n        this._animatedValueY = 0;\n\n        this._panResponder = PanResponder.create({\n            onPanResponderTerminationRequest: () => false,\n            onMoveShouldSetResponderCapture: () => true,\n            onMoveShouldSetPanResponderCapture: (e, gestureState) => {\n                if(!this.props.swipingEnabled)\n                    return false;\n                if(this.props.onAnimationStart)\n                    this.props.onAnimationStart();\n                const allow = Math.abs(this.props.direction === \"row\" ? gestureState.dx : gestureState.dy) > 5;\n                if(allow) this.stopAutoplay();\n                return allow;\n            },\n            onPanResponderGrant: (e, gestureState) => this._fixState(),\n            onPanResponderMove: Animated.event([\n                null, this.props.direction === \"row\" ? {dx: this.state.pan.x} : {dy: this.state.pan.y},\n            ]),\n            onPanResponderRelease: (e, gesture) => {\n                const correction = this.props.direction===\"row\" ? gesture.moveX-gesture.x0 : gesture.moveY-gesture.y0;\n                this.startAutoplay();\n                if(Math.abs(correction) < ((this.props.direction===\"row\" ? this.state.width : this.state.height) * this.props.actionMinWidth))\n                    return Animated.spring(this.state.pan,{toValue:{x:0,y:0}}).start(() => {\n                        if(this.props.onAnimationEnd)\n                            this.props.onAnimationEnd(this.state.activeIndex);\n                    });\n                this._changeIndex(correction>0 ? -1 : 1);\n            }\n        });\n    }\n\n    componentDidMount() {\n        this.state.pan.x.addListener((value) => this._animatedValueX = value.value);\n        this.state.pan.y.addListener((value) => this._animatedValueY = value.value);\n        this.startAutoplay();\n    }\n\n    componentWillUnmount() {\n        this.stopAutoplay();\n        this.state.pan.x.removeAllListeners();\n        this.state.pan.y.removeAllListeners();\n    }\n\n    startAutoplay() {\n        this.stopAutoplay();\n        if(this.props.autoplayTimeout) {\n            this.autoplay = setTimeout(() => {\n                this.moveUpDown(this.props.autoplayTimeout<0)\n            }, Math.abs(this.props.autoplayTimeout)*1000);\n        }\n    }\n\n    stopAutoplay() {\n        this.autoplay && clearTimeout(this.autoplay);\n    }\n\n    moveUpDown(down=false) {\n        this._fixState();\n        if(this.props.onAnimationStart)\n            this.props.onAnimationStart();\n        this._changeIndex(down ? -1 : 1);\n    }\n\n    _fixState() {\n        this._animatedValueX = this.props.direction===\"row\" ? this.state.width*this.state.activeIndex*-1 : 0;\n        this._animatedValueY = this.props.direction===\"row\" ? 0 : this.state.height*this.state.activeIndex*-1;\n        this.state.pan.setOffset({x: this._animatedValueX, y: this._animatedValueY});\n        this.state.pan.setValue({x: 0, y: 0});\n    }\n\n    _changeIndex(delta=1) {\n        let move = {x:0,y:0};\n        let skipChanges = (!delta);\n        let calcDelta = delta;\n        if(this.state.activeIndex<=0 && delta<0) {\n            skipChanges = (!this.props.loop);\n            calcDelta = this.count+delta;\n        } else if(this.state.activeIndex+1>=this.count && delta>0) {\n            skipChanges = (!this.props.loop);\n            calcDelta = -1*this.state.activeIndex+delta-1;\n        }\n        if(skipChanges)\n            return Animated.spring(this.state.pan,{toValue:move}).start(() => {\n                if(this.props.onAnimationEnd)\n                    this.props.onAnimationEnd(this.state.activeIndex);\n            });\n        this.stopAutoplay();\n        let index = this.state.activeIndex+calcDelta;\n        this.setState({activeIndex: index});\n        if(this.props.direction===\"row\")\n            move.x = this.state.width*-1*calcDelta;\n        else\n            move.y = this.state.height*-1*calcDelta;\n        Animated.spring(this.state.pan,{toValue:move}).start(() => {\n            if(this.props.onAnimationEnd)\n                this.props.onAnimationEnd(index);\n        });\n        this.startAutoplay();\n        this.props.onIndexChanged && this.props.onIndexChanged(index);\n    }\n\n    _onLayout(event) {\n        const {width,height} = event.nativeEvent.layout;\n        this.setState({width,height}, () => this._fixState());\n    }\n\n    render() {\n        const {pan,width,height,activeIndex} = this.state;\n        const {\n            direction,\n            containerStyle,\n            swipeAreaStyle,\n            swipeWrapperStyle,\n            controlsWrapperStyle,\n            dotsWrapperStyle,\n            dotElement,\n            dotStyle,\n            activeDotElement,\n            activeDotStyle,\n            prevButtonElement,\n            prevButtonStyle,\n            prevButtonText,\n            nextButtonElement,\n            nextButtonStyle,\n            nextButtonText,\n            loop,\n            buttonsEnabled,\n        } = this.props;\n        if(!width) return (<View style={[styles.container,containerStyle]} onLayout={this._onLayout.bind(this)}/>);\n        const overRangeButtonsOpacity = !loop ? this.props.overRangeButtonsOpacity : this.props.overRangeButtonsOpacity || 1;\n        let {children} = this.props;\n        if(!Array.isArray(children)) children = [children];\n        this.count = children.length;\n        return (\n            <View style={[styles.container,containerStyle]} onLayout={this._onLayout.bind(this)}>\n                <View style={[styles.sliderContainer,swipeAreaStyle]}>\n                    <Animated.View\n                        style={[{\n                            position: \"relative\",\n                            top: 0,\n                            left: 0,\n                        },swipeWrapperStyle,{\n                            flexDirection: direction,\n                            width: direction===\"row\" ? width*this.count : width,\n                            height: direction===\"row\" ? height : height*this.count,\n                        },{transform:[{translateX:pan.x},{translateY:pan.y}]}]}\n                        {...this._panResponder.panHandlers}\n                    >\n                        {children.map((el,i)=>(<View key={i} style={{width,height}}>{el}</View>))}\n                    </Animated.View>\n                    {!buttonsEnabled ? null : (\n                      <View style={[styles.controlsWrapperStyle,{\n                          flexDirection: direction,\n                      }, direction===\"row\" ? {left: 0} : {top: 0}, controlsWrapperStyle]}>\n                          <View style={{opacity:!activeIndex ? overRangeButtonsOpacity : 1}}>\n                              <TouchableOpacity disabled={!activeIndex && !loop} onPress={()=>this.moveUpDown(true)}>\n                                  {prevButtonElement || <Text style={[styles.prevButtonStyle,prevButtonStyle]}>{prevButtonText}</Text>}\n                              </TouchableOpacity>\n                          </View>\n                          <View style={[{flexDirection:direction},styles.dotsWrapperStyle,dotsWrapperStyle]}>\n                              {children.map((el,i)=>(\n                                <View key={i}>\n                                    {i===activeIndex\n                                      ? activeDotElement || <View style={[styles.activeDotStyle,activeDotStyle]} />\n                                      : dotElement || <View style={[styles.dotStyle,dotStyle]} />}\n                                </View>\n                              ))}\n                          </View>\n                          <View style={{opacity:activeIndex+1>=this.count ? overRangeButtonsOpacity : 1}}>\n                              <TouchableOpacity disabled={activeIndex+1>=this.count && !loop} onPress={()=>this.moveUpDown()}>\n                                  {nextButtonElement || <Text style={[styles.nextButtonStyle,nextButtonStyle]}>{nextButtonText}</Text>}\n                              </TouchableOpacity>\n                          </View>\n                      </View>\n                    )}\n                </View>\n            </View>\n        );\n    }\n}\n\nSwiper.propTypes = {\n    direction: PropTypes.oneOf([\"row\",\"column\"]),\n    index: PropTypes.number,\n    onIndexChanged: PropTypes.func,\n    onAnimationStart: PropTypes.func,\n    onAnimationEnd: PropTypes.func,\n    actionMinWidth: PropTypes.number,\n    children: PropTypes.node.isRequired,\n    overRangeButtonsOpacity: PropTypes.number,\n    loop: PropTypes.bool,\n    autoplayTimeout: PropTypes.number,\n    swipingEnabled: PropTypes.bool,\n    buttonsEnabled: PropTypes.bool,\n    containerStyle: ViewPropTypes.style,\n    swipeAreaStyle: ViewPropTypes.style,\n    swipeWrapperStyle: ViewPropTypes.style,\n    controlsWrapperStyle: ViewPropTypes.style,\n    dotsWrapperStyle: ViewPropTypes.style,\n    dotStyle: ViewPropTypes.style,\n    dotElement: PropTypes.element,\n    activeDotStyle: ViewPropTypes.style,\n    activeDotElement: PropTypes.element,\n    prevButtonStyle: Text.propTypes.style,\n    prevButtonElement: PropTypes.element,\n    prevButtonText: PropTypes.string,\n    nextButtonStyle: Text.propTypes.style,\n    nextButtonElement: PropTypes.element,\n    nextButtonText: PropTypes.string,\n};\n\nSwiper.defaultProps = {\n    direction: \"row\",\n    index: 0,\n    actionMinWidth: 0.25,\n    overRangeButtonsOpacity: 0,\n    loop: false,\n    autoplayTimeout: 0,\n    swipingEnabled: true,\n    buttonsEnabled: true,\n    prevButtonText: \"prev\",\n    nextButtonText: \"next\",\n};","\nimport React,{Component,useContext,useEffect} from 'react';\nimport {Animated,PanResponder,Dimensions,View,Text,Image,TouchableOpacity,ScrollView} from 'react-native'\nimport { Context } from \"../context\";\nimport Swiper from './Swiper'\nimport SwipeableList from './SwipeableList'\nimport Header from './Header'\n// const translateY = new Animated.Value(0);\n\nlet currentY=0\n//const prevY=new Animated.Value(0)\nlet prevY=0\nconst yScroll = new Animated.Value(0)\nconst SwipeableScroller = (props) => {\n  const [state, setState] = useContext(Context);\n  \n  \n  useEffect(()=>{\n    yScroll.addListener(({value})=>{\n      //console.log(state.yscroll)\n      //console.log(value)\n    })\n  },[])\n  const onScroll=(e)=>{\n    \n    //console.log(e.nativeEvent.contentOffset.y)\n    currentY=(e.nativeEvent.contentOffset.y)\n    //console.log(yScroll._value+prevY-currentY)\n    yScroll.setValue(yScroll._value+prevY-currentY)\n    // const ANIMATION_INTERPOLATE =currentY.interpolate(\n    //   {\n    //       inputRange:[0,50,100],\n    //       outputRange:[0,50,50]\n    //   }\n    // )\n    //setState({...state,yscroll:ANIMATION_INTERPOLATE})\n    //prevY.setValue(e.nativeEvent.contentOffset.y)\n    state.yscroll.setValue(yScroll._value)\n    let translateYInterp = state.yscroll.interpolate(\n      {\n          inputRange:[0,50,51,100],\n          outputRange:[0,50,50,50]\n      }\n    )\n    setState({...state,translateY:translateYInterp})\n    //setState({...state,yscroll:yScroll})\n    prevY=e.nativeEvent.contentOffset.y\n    \n  }\n  return(\n           \n  <View>\n    <ScrollView \n      style={{backgroundColor:'transparent',height:(Dimensions.get('window').height*13/15-60),zIndex:98}}\n      onScroll={(e)=>{\n          onScroll(e)\n        }\n      }\n      scrollEnabled={false}\n      scrollEventThrottle={16}\n    >\n    \n      <View style={{backgroundColor:'transparent',flex:1,flexDirection:'column',margin:0,paddingRight:0,paddingLeft:0}}>\n        <View style={{backgroundColor:'transparent',flex:1,height:Dimensions.get('window').height*2/3,flexDirection:'column',margin:0,paddingRight:0,paddingLeft:0}}>\n          <View  style={{height:Dimensions.get('window').height/6,width:Dimensions.get('window').width-2}}>\n            <Swiper buttonsEnabled={false} loop={true} autoplayTimeout={5}>\n\n              <View style={{\n                flex: 1,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                backgroundColor: \"rgb(20,20,20)\",\n                textAlaign:'center',\n                borderRadius:4,\n                \n                overflow:'hidden',\n                \n              }}>\n              </View>\n              <View style={{\n                flex: 1,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                backgroundColor: \"rgb(110,110,110)\",\n                \n                borderRadius:4,\n                overflow:'hidden',\n                \n              }}>\n\n              </View>\n              <View style={{\n                flex: 1,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                backgroundColor: \"rgb(200,200,200)\",\n                borderRadius:4,\n                \n                overflow:'hidden',\n                \n              }}>\n\n              </View>\n            </Swiper>\n          </View>\n        </View>\n      <View style={{height:Dimensions.get('window').height/2}}>\n        <SwipeableList/>\n      </View>\n    </View>\n  </ScrollView>\n</View>\n)\n     \n\n}\nexport default SwipeableScroller\n\n\n\n// class SwipeableScroller extends Component {\n//   //static context = Context\n//   //const [state, setState] = useContext(Context);\n//   constructor(props) {\n//       super(props);\n//       //this.scroller=React.createRef()\n//       //this.Header=React.createRef()\n//       this.state = {\n//           yscroll: new Animated.Value(0),\n//           dy:new Animated.Value(0),\n//           lastscroll:0,\n//           scroll:0,\n//           headerheight:22,\n//           change:0\n//       };\n//     }\n//   componentDidMount(){\n//       translateY.addListener(({value})=>{\n//           console.log(value)\n//           //this.setState({...this.state,scroll:value})\n//           // var limit=this.state.headerheight\n//           //   this.setState({scroll:value})\n//           //   if(value<=limit){\n//           //     this.setState({change:(limit*(value/limit))})\n//           //     console.log(limit*(value/limit))\n//           //   }\n          \n//           //this.Header.setNativeProps({scrollValue:value})\n//           // this.scroller.current.scrollTo({\n//           //     y:-1*value\n//           // })\n//           //console.log(this.Header)\n//           //this.Header.props.yscroll=value\n//       })\n//   }\n//   onScroll=(e)=>{\n//       //const [state, setState] = this.context\n//       //console.log()\n//       //console.log(e.nativeEvent.contentOffset.y)\n//       //setState({...state,yscroll:e.nativeEvent.contentOffset.y})\n//       translateY.setValue(e.nativeEvent.contentOffset.y)\n//       //setState({...state,yscroll:e.nativeEvent.contentOffset.y})\n      \n//       //console.log(state.yscroll)\n//     }\n//   // _panResponder = PanResponder.create({\n//   //     onMoveShouldSetResponderCapture: () => true,\n//   //     onMoveShouldSetPanResponderCapture: () => true,\n//   //     onPanResponderMove: (e,gestureState)=>{\n//   //         translateY.setValue(this.state.lastscroll+gestureState.dy)\n\n//   //         // this.scroller.current.scrollTo({\n//   //         //     y:-1*this.state.lastscroll+translateY._value,\n//   //         //     animated:true,\n//   //         //     duration:1\n//   //         // })\n          \n//   //     },\n\n//   //     onPanResponderRelease: (e, {vy, dy}) => {\n//   //         //translateY.setValue(state.yscroll._value+dy)\n//   //         //console.log(this.state.yscroll+translateY._value)\n//   //         this.setState(\n//   //             (state,props)=>(\n//   //                 {\n//   //                     ...this.state,\n//   //                     lastscroll:state.lastscroll+dy}\n//   //             ))\n//   //         //console.log(this.state.yscroll)\n//   //     }\n//   // });\n\n//   render(){\n//       //const [{yscroll},setState]= this.context\n//       //setState()\n//       //console.log(this.context)\n      \n//       return(\n         \n//           <View>\n//           {/* <Header ref = {header=>{this.Header=header}} style = {{height:22}} yscroll={this.state.scroll}/> */}\n//           <ScrollView \n//               //ref={this.scroller}\n//               style={{backgroundColor:'transparent',height:(Dimensions.get('window').height*13/15-60),zIndex:98}}\n//               onScroll={(e)=>{\n//                 // setState({\n//                 //   yscroll:e.nativeEvent.contentOffset.y\n//                 // })\n//                 // console.log(yscroll)\n//                   this.onScroll(e)\n//                 }\n//               }\n//               //onScroll={}\n//               //scrollTop={state.yscroll}\n//               scrollEnabled={false}\n//               scrollEventThrottle={16}\n//               // {...this._panResponder.panHandlers}\n//           >\n          \n//           <View style={{backgroundColor:'transparent',flex:1,flexDirection:'column',margin:0,paddingRight:0,paddingLeft:0}}>\n//               {/* {props.children} */}\n              \n//               <View style={{backgroundColor:'transparent',flex:1,height:Dimensions.get('window').height*2/3,flexDirection:'column',margin:0,paddingRight:0,paddingLeft:0}}>\n              \n//         <View  style={{height:Dimensions.get('window').height/6,width:Dimensions.get('window').width-2}}>\n        \n//           <Swiper buttonsEnabled={false} loop={true} autoplayTimeout={5}>\n\n//             <View style={{\n//               flex: 1,\n//               alignItems: \"center\",\n//               justifyContent: \"center\",\n//               backgroundColor: \"rgb(20,20,20)\",\n//               textAlaign:'center',\n//               borderRadius:4,\n              \n//               overflow:'hidden',\n              \n//               }}>\n//                 {/* <Text style={{           \n//                   textDecorationLine:'none',\n//                   color:'white',\n//                   fontSize: 12,\n//                   textShadowColor: 'rgba(128, 128, 128, 1)',\n//                   textShadowOffset: {width: 0, height: 0},\n//                   textShadowRadius: 8,\n//                   flex:1,\n//                   // textAlign:'center',\n//                   // alignItems:'center',\n//                   // justifyContent:'center',\n//                   // flexDirection:'row',\n//                 }}>Slide 1</Text> */}\n//             </View>\n//             <View style={{\n//               flex: 1,\n//               alignItems: \"center\",\n//               justifyContent: \"center\",\n//               backgroundColor: \"rgb(110,110,110)\",\n              \n//               borderRadius:4,\n//               overflow:'hidden',\n              \n//             }}>\n//                 {/* <Text style={{           \n//                   textDecorationLine:'none',\n//                   color:'white',\n//                   fontSize: 12,\n//                   textShadowColor: 'rgba(128, 128, 128, 1)',\n//                   textShadowOffset: {width: 0, height: 0},\n//                   textShadowRadius: 8,\n//                   flex:1,\n//                   textAlign:'center',\n//                   // alignItems:'center',\n//                   // justifyContent:'center',\n//                   // flexDirection:'row',\n//                 }}>Slide 2</Text> */}\n//             </View>\n//             <View style={{\n//               flex: 1,\n//               alignItems: \"center\",\n//               justifyContent: \"center\",\n//               backgroundColor: \"rgb(200,200,200)\",\n//               borderRadius:4,\n             \n//               overflow:'hidden',\n             \n//             }}>\n//                 {/* <Text style={{           \n//                   textDecorationLine:'none',\n//                   color:'white',\n//                   fontSize: 12,\n//                   textShadowColor: 'rgba(128, 128, 128, 1)',\n//                   textShadowOffset: {width: 0, height: 0},\n//                   textShadowRadius: 8,\n//                   flex:1,\n//                   textAlign:'center',\n//                   alignItems:'center',\n//                   justifyContent:'center',\n//                   // flexDirection:'row',\n//                 }}>Slide 3</Text> */}\n//             </View>\n//           </Swiper>\n//         </View>\n\n//         </View>\n//         <View style={{height:Dimensions.get('window').height/2}}>\n//           <SwipeableList/>\n//         </View>\n//           </View>\n//       </ScrollView>\n//       </View>\n//       )\n//    }\n\n// }\n// export default SwipeableScroller\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Context } from \"../context\";\nimport {TextInput,View,TouchableOpacity,Dimensions,Text} from \"react-native\"\n\nconst AddPost = () => {\nconst [state, setState] = useContext(Context);\nconst[userInput,setUserInput,Refs] = useState(\"\")\n//const [userInput, setUserInput] = useState(\"\");\n//const [trackTitle, setTrackTitle] = useState(\"\");\n//const [posts] =useState(\"\")\n\n// useEffect(() => {\n// //     axios\n// //       .get(\n// //         `https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.search?q_track=${trackTitle}&page_size=10&page=1&s_track_rating=desc&apikey=${\n// //           process.env.REACT_APP_MM_KEY\n// //         }`\n// //       )\n// //       .then(res => {\n// //         let track_list = res.data.message.body.track_list;\n// //         setState({ track_list: track_list, heading: \"Search Results\" });\n// //       })\n// //       .catch(err => console.log(err));\n// //   }, [trackTitle]\n// // this.refs.addPost.value=\"\"\n//     },[state.posts]\n// );\n   \n    // window.addEventListener(\"resize\", updateDimensions);\n    // window.addEventListener(\"orientationchange\",updateDimensions);\n    const addTodo = (e) => {\n    //e.preventDefault();\n    //setTrackTitle(userInput);\n    if(state.text===\"\"){\n        //console.log('stop')\n    }\n    else{\n        alert(state.text)\n        setState({...state,posts:[...state.posts,state.text],text:\"\"})\n    }\n    //console.log(state)\n    //console.log(Refs)\n    //document.getElementById('addPost').value=''\n    \n  };\n\n\n  const onChange = (e) => {\n    //e.preventDefault()\n    //setUserInput(e.target.value)\n    //console.log()\n    \n    setState({...state,userInput:e.target.value})\n    //console.log(e.nativeEvent.inputType)\n    \n        if(e.nativeEvent.inputType==='insertLineBreak'){\n            addTodo()\n            //console.log('we should be here')\n            //setState({...state,posts:[...state.posts,state.text],text:\"\"})\n        }\n        else if(e.nativeEvent.inputType==='insertText'){\n            \n            setState({...state,text:e.target.value})\n        }\n    \n\n    \n  };\n\n  return (\n    // eslint-disable-next-line no-use-before-define\n    <View style={{\n      borderColor:'transparent',\n      borderWidth:1,\n      flex:1,\n      flexDirection:'row',\n      marginTop:1,\n      // width:Dimensions.get('window').width,\n    }}>\n      {/* <form onSubmit={addTodo}  style={{\n              margin:1,\n              borderColor:'#cfcfcf',\n              borderWidth:1,\n              alignItems:'center',\n              flexDirection:'column',\n              flex:1,\n              \n              // shadowColor: 'rgba(1, 1, 1, 1)',\n              // shadowOffset: {width: 0, height: 0},\n              // shadowRadius: 1,\n              color:'black',\n              // textShadowColor: 'rgba(1, 1, 1, 1)',\n              // textShadowOffset: {width: 0, height: 0},\n              // textShadowRadius: 5\n            }}> */}\n        \n          {/* <input\n            id=\"addPost\"\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"type todo...\"\n            name=\"userInput\"\n            value={state.text}\n            onChange={onChange}\n          /> */}\n        <TextInput \n            className='inputText'\n            editable = {true}\n            autoCorrect={false}\n            blurOnSubmit={false}\n            maxLength = {40}\n            multiline = {false}\n            numberOfLines = {1}\n            caretHidden={true}\n            //onChangeText={(text) => setState({...state,text:text})}\n            onChangeText={(text)=>{ \n              setState({...state,text:text})\n              //console.log(text)\n            }}\n            keyboardType={'default'}\n            value={state.text}\n            onChange={onChange}\n            onSubmitEditing={addTodo}\n            //onClick={console.log('clicked')}\n            returnKeyType='search'\n            clearButtonMode=\"while-editing\"\n            autoFocus\n            //onFocus={()=>{console.log('on focus')}}\n            theme={{ colors: { \n              background: '#003489', \n              placeholder: 'white', \n              primary: 'white', \n              text: 'white',  \n              underlineColor: 'transparent',  } \n            }}\n            style={{\n              alignItems:'center',\n              borderColor:'#cfcfcf',\n              borderWidth:1,\n              color:'black',\n              flex:1,\n              flexDirection:'row',\n              height:22,\n              marginLeft:1,\n              paddingLeft:3,\n              width:Dimensions.get('window').width-26,\n              \n              \n\n              //outline:'none',\n              \n              // shadowColor: 'rgba(1, 1, 1, 1)',\n              // shadowOffset: {width: 0, height: 0},\n              // shadowRadius: 1,\n              \n              // paddingBottom:2,\n              \n              // textShadowColor: 'rgba(1, 1, 1, 1)',\n              // textShadowOffset: {width: 0, height: 0},\n              // textShadowRadius: 5\n              \n            }}\n          />\n        \n        {/* <button className=\"button\" type=\"submit\">\n          add\n        </button> */}\n        <TouchableOpacity \n           \n            type=\"submit\" \n            style={{\n              alignItems:'center',\n              backgroundColor:'#ffffff',\n              borderColor:'#cfcfcf',\n              borderWidth:1,\n              height:22,\n              justifyContent:'center',\n              marginLeft:2,\n              marginRight:1,\n              paddingLeft:2,\n              paddingRight:2,\n              width:22,\n                \n                \n                \n                \n                \n                \n       \n                //flex:1,\n                //shadowColor: 'rgba(1, 1, 1, 1)',\n                //shadowOffset: {width: 0, height: 0},\n                //shadowRadius: 20\n                }}\n            onPress={addTodo}>\n          <Text selectable ={false} style={{\n              color:'#cfcfcf',\n              fontSize:12,\n              paddingBottom:2,\n\n              extDecorationLine:'none',\n              //color:'white',\n              fontSize: 12,\n              // textShadowColor: 'rgba(128, 128, 128, 1)',\n              // textShadowOffset: {width: 0, height: 0},\n              // textShadowRadius: 8,\n              flex:1,\n              textAlign:'center',\n              alignItems:'center',\n              justifyContent:'center',\n              flexDirection:'row',\n              margin:5,\n            }}>\n                +\n            </Text>\n        </TouchableOpacity>\n      {/* </form> */}\n    </View>\n  );\n};\n\nexport default AddPost;","//import React, {memo} from 'react'\nimport React,{Component,useContext,useState,useEffect,memo} from 'react';\nimport {Animated,TouchableOpacity,PanResponder,Text,View,KeyboardAvoidingView,ScrollView,Dimensions} from 'react-native'\nimport HorizontalSwipeElements from './HorizontalSwipeElements'\nimport SwipeableList from './SwipeableList'\nimport SwipeableScroller from './SwipeableScroller'\nimport Swiper from './Swiper'\nimport AddPost from './AddPost'\nimport Header from './Header'\nimport Drawer from './Drawer'\nimport {Context} from '../context'\nconst Home = () => {\n  const [state,setState]=useState(Context)\n  const getUserData=async()=>{\n    const responded= await fetch('https://squwbs.herokuapp.com/readCookies',{mode:'cors'})\n    const jsonObj = await responded.json()\n    console.log(JSON.stringify(jsonObj))\n    setState({...state,userData:{...jsonObj}})\n  }\n  useEffect(()=>{\n    getUserData()\n  },[])\n  // if(state.userData=={}){\n  //   return(\n  //     <div style={{\n  //       alignItems:'center',\n  //       borderColor:'#cfcfcf',\n  //       borderRadius:2,\n  //       borderWidth:1,\n  //       flex:1,\n  //       justifyContent:'space-evenly',\n  //       margin:1,\n  //       // shadowColor: 'rgba(1, 1, 1, 1)',\n  //       // shadowOffset: {width: 0, height: 0},\n  //       // shadowRadius: 20,\n  //       //backgroundColor:'#ffffff',\n  //       //height:22,\n  //     }}>\n  //     {/* <p style={{          \n      \n  //         height:22,\n     \n  //         flexDirection:'row',\n  //         flex:1,\n  //         fontSize:12,\n     \n  //         color:'black',\n  //         // textShadowColor: 'black',\n  //         // textShadowOffset: {width: 0, height: 0},\n  //         // textShadowRadius: 20\n  //       }}>\n  //       Home\n  //     </p> */}\n  //       <View style={{height:Dimensions.get('window').height}}>  \n  //         <Drawer>\n  //           <SwipeableScroller/>\n  //         </Drawer>\n  //         <KeyboardAvoidingView style={{display:'absolute',bottom:0,flex:1,position:'absolute',height:Dimensions.get('window').height*5/30-30,backgroundColor:'transparent',flexDirection:'column',margin:0,width:Dimensions.get('window').width,padding:0}} behavior=\"padding\" enabled >\n  //             <View style={{backgroundColor:'transparent',height:30,felxDirection:'column',alignItems:'center',justifyContent:'center',marginRight:0,marginLeft:0,}}>\n  //               <AddPost style={{marginTop:0,flex:1}}/>\n  //             </View>\n    \n  //             <ScrollView horizontal = {true} style={{height:Dimensions.get('window').height/15,backgroundColor:'transparent',flexDirection:'row',marginLeft:0,marginRight:0}}>\n  //               <TouchableOpacity>\n  //               <View style={{\n  //                 height:Dimensions.get('window').height/15,\n  //                 width:(Dimensions.get('window').height)/12,\n  //                 backgroundColor:'darkgrey',\n  //                 flex:1,\n  //                 flexDirection:'column',\n  //                 marginRight:2,\n  //                 marginLeft:3,\n  //                 borderRadius:4,\n  //                 borderColor:'white',\n  //                 overflow:'hidden'\n  //                 }}>\n  //                 {/* <Text selectable={false} style={{           \n  //                   textDecorationLine:'none',\n  //                   color:'white',\n  //                   fontSize: 12,\n  //                   textShadowColor: 'rgba(128, 128, 128, 1)',\n  //                   textShadowOffset: {width: 0, height: 0},\n  //                   textShadowRadius: 8,\n  //                   flex:1,\n  //                   textAlign:'center',\n  //                   alignItems:'center',\n  //                   justifyContent:'center',\n  //                   flexDirection:'row',\n  //                 }}>one</Text> */}\n  //               </View>\n  //               </TouchableOpacity>\n  //               <TouchableOpacity>\n  //               <View style={{\n  //                 height:Dimensions.get('window').height/15,\n  //                 width:(Dimensions.get('window').height)/12,\n  //                 backgroundColor:'darkgrey',\n  //                 flex:1,\n  //                 flexDirection:'column',\n  //                 marginRight:2,\n  //                 marginLeft:2,\n  //                 borderRadius:4,\n  //                 borderColor:'white',\n  //                 overflow:'hidden'\n  //                 }}>\n  //                 {/* <Text selectable={false} style={{           \n  //                   textDecorationLine:'none',\n  //                   color:'white',\n  //                   fontSize: 12,\n  //                   textShadowColor: 'rgba(128, 128, 128, 1)',\n  //                   textShadowOffset: {width: 0, height: 0},\n  //                   textShadowRadius: 8,\n  //                   flex:1,\n  //                   textAlign:'center',\n  //                   alignItems:'center',\n  //                   justifyContent:'center',\n  //                   flexDirection:'row',\n                    \n  //                 }}>two</Text> */}\n  //               </View>\n  //               </TouchableOpacity>\n  //               <TouchableOpacity>\n  //               <View style={{\n  //                 height:Dimensions.get('window').height/15,\n  //                 width:(Dimensions.get('window').height)/12,\n  //                 backgroundColor:'darkgrey',\n  //                 flex:1,\n  //                 flexDirection:'column',\n  //                 marginRight:2,\n  //                 marginLeft:2,\n  //                 borderRadius:4,\n  //                 borderColor:'white',\n  //                 overflow:'hidden'\n  //                 }}>\n  //                 {/* <Text selectable={false} style={{           \n  //                   textDecorationLine:'none',\n  //                   color:'white',\n  //                   fontSize: 12,\n  //                   textShadowColor: 'rgba(128, 128, 128, 1)',\n  //                   textShadowOffset: {width: 0, height: 0},\n  //                   textShadowRadius: 8,\n  //                   flex:1,\n  //                   textAlign:'center',\n  //                   alignItems:'center',\n  //                   justifyContent:'center',\n  //                   flexDirection:'row',\n  //                 }}>three</Text> */}\n  //               </View>\n  //               </TouchableOpacity>\n  //               <TouchableOpacity>\n  //               <View style={{\n  //                 height:Dimensions.get('window').height/15,\n  //                 width:(Dimensions.get('window').height)/12,\n  //                 backgroundColor:'darkgrey',\n  //                 flex:1,\n  //                 flexDirection:'column',\n  //                 marginRight:2,\n  //                 marginLeft:2,\n  //                 borderRadius:4,\n  //                 borderColor:'white',\n  //                 overflow:'hidden'\n  //               }}>\n  //                 {/* <Text selectable={false} style={{           \n  //                   textDecorationLine:'none',\n  //                   color:'white',\n  //                   fontSize: 12,\n  //                   textShadowColor: 'rgba(128, 128, 128, 1)',\n  //                   textShadowOffset: {width: 0, height: 0},\n  //                   textShadowRadius: 8,\n  //                   flex:1,\n  //                   textAlign:'center',\n  //                   alignItems:'center',\n  //                   justifyContent:'center',\n  //                   flexDirection:'row',\n  //                 }}>four</Text> */}\n  //               </View>\n  //               </TouchableOpacity>\n  //               <TouchableOpacity>\n  //               <View style={{\n  //                 height:Dimensions.get('window').height/15,\n  //                 width:(Dimensions.get('window').height)/12,\n  //                 backgroundColor:'darkgrey',\n  //                 flex:1,\n  //                 flexDirection:'column',\n  //                 marginRight:2,\n  //                 marginLeft:2,\n  //                 borderRadius:4,\n  //                 borderColor:'white',\n  //                 overflow:'hidden'\n  //               }}>\n  //                 {/* <Text selectable={false} style={{           \n  //                   textDecorationLine:'none',\n  //                   color:'white',\n  //                   fontSize: 12,\n  //                   textShadowColor: 'rgba(128, 128, 128, 1)',\n  //                   textShadowOffset: {width: 0, height: 0},\n  //                   textShadowRadius: 8,\n  //                   flex:1,\n  //                   textAlign:'center',\n  //                   alignItems:'center',\n  //                   justifyContent:'center',\n  //                   flexDirection:'row',\n  //                 }}>one</Text> */}\n  //               </View>\n  //               </TouchableOpacity>\n  //               <TouchableOpacity>\n  //               <View style={{\n  //                 height:Dimensions.get('window').height/15,\n  //                 width:(Dimensions.get('window').height)/12,\n  //                 backgroundColor:'darkgrey',\n  //                 flex:1,\n  //                 flexDirection:'column',\n  //                 marginRight:2,\n  //                 marginLeft:2,\n  //                 borderRadius:4,\n  //                 borderColor:'white',\n  //                 overflow:'hidden'\n  //               }}>\n  //                 {/* <Text selectable={false} style={{           \n  //                   textDecorationLine:'none',\n  //                   color:'white',\n  //                   fontSize: 12,\n  //                   textShadowColor: 'rgba(128, 128, 128, 1)',\n  //                   textShadowOffset: {width: 0, height: 0},\n  //                   textShadowRadius: 8,\n  //                   flex:1,\n  //                   textAlign:'center',\n  //                   alignItems:'center',\n  //                   justifyContent:'center',\n  //                   flexDirection:'row',\n  //                 }}>two</Text> */}\n  //               </View>\n  //               </TouchableOpacity>\n  //               <TouchableOpacity>\n  //               <View style={{\n  //                 height:Dimensions.get('window').height/15,\n  //                 width:(Dimensions.get('window').height)/12,\n  //                 backgroundColor:'darkgrey',\n  //                 flex:1,\n  //                 flexDirection:'column',\n  //                 marginRight:2,\n  //                 marginLeft:2,\n  //                 borderRadius:4,\n  //                 borderColor:'white',\n  //                 overflow:'hidden'\n  //               }}>\n  //                 {/* <Text selectable={false} style={{           \n  //                   textDecorationLine:'none',\n  //                   color:'white',\n  //                   fontSize: 12,\n  //                   textShadowColor: 'rgba(128, 128, 128, 1)',\n  //                   textShadowOffset: {width: 0, height: 0},\n  //                   textShadowRadius: 8,\n  //                   flex:1,\n  //                   textAlign:'center',\n  //                   alignItems:'center',\n  //                   justifyContent:'center',\n  //                   flexDirection:'row',\n  //                 }}>three</Text> */}\n  //               </View>\n  //               </TouchableOpacity>\n  //               <TouchableOpacity>\n  //               <View style={{\n  //                 height:Dimensions.get('window').height/15,\n  //                 width:(Dimensions.get('window').height)/12,\n  //                 backgroundColor:'darkgrey',\n  //                 flex:1,\n  //                 flexDirection:'column',\n  //                 marginRight:2,\n  //                 marginLeft:2,\n  //                 borderRadius:4,\n  //                 borderColor:'white',\n  //                 overflow:'hidden'\n  //               }}>\n  //                 {/* <Text selectable={false} style={{           \n  //                   textDecorationLine:'none',\n  //                   color:'white',\n  //                   fontSize: 12,\n  //                   textShadowColor: 'rgba(128, 128, 128, 1)',\n  //                   textShadowOffset: {width: 0, height: 0},\n  //                   textShadowRadius: 8,\n  //                   flex:1,\n  //                   textAlign:'center',\n  //                   alignItems:'center',\n  //                   justifyContent:'center',\n  //                   flexDirection:'row',\n  //                 }}>four</Text> */}\n  //               </View>\n  //               </TouchableOpacity>\n                \n  //             </ScrollView>\n            \n  //           </KeyboardAvoidingView> \n  //       </View> \n  //     </div>\n  //   )\n  // }\n  // else{\n    return(\n      <View style={{height:Dimensions.get('window').height}}>  \n          <Drawer>\n            <SwipeableScroller/>\n          </Drawer>\n          <KeyboardAvoidingView style={{display:'absolute',bottom:0,flex:1,position:'absolute',height:Dimensions.get('window').height*5/30-30,backgroundColor:'transparent',flexDirection:'column',margin:0,width:Dimensions.get('window').width,padding:0}} behavior=\"padding\" enabled >\n              <View style={{backgroundColor:'transparent',height:30,felxDirection:'column',alignItems:'center',justifyContent:'center',marginRight:0,marginLeft:0,}}>\n                <AddPost style={{marginTop:0,flex:1}}/>\n              </View>\n    \n              <ScrollView horizontal = {true} style={{height:Dimensions.get('window').height/15,backgroundColor:'transparent',flexDirection:'row',marginLeft:0,marginRight:0}}>\n                <TouchableOpacity>\n                <View style={{\n                  height:Dimensions.get('window').height/15,\n                  width:(Dimensions.get('window').height)/12,\n                  backgroundColor:'darkgrey',\n                  flex:1,\n                  flexDirection:'column',\n                  marginRight:2,\n                  marginLeft:3,\n                  borderRadius:4,\n                  borderColor:'white',\n                  overflow:'hidden'\n                  }}>\n                  {/* <Text selectable={false} style={{           \n                    textDecorationLine:'none',\n                    color:'white',\n                    fontSize: 12,\n                    textShadowColor: 'rgba(128, 128, 128, 1)',\n                    textShadowOffset: {width: 0, height: 0},\n                    textShadowRadius: 8,\n                    flex:1,\n                    textAlign:'center',\n                    alignItems:'center',\n                    justifyContent:'center',\n                    flexDirection:'row',\n                  }}>one</Text> */}\n                </View>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                <View style={{\n                  height:Dimensions.get('window').height/15,\n                  width:(Dimensions.get('window').height)/12,\n                  backgroundColor:'darkgrey',\n                  flex:1,\n                  flexDirection:'column',\n                  marginRight:2,\n                  marginLeft:2,\n                  borderRadius:4,\n                  borderColor:'white',\n                  overflow:'hidden'\n                  }}>\n                  {/* <Text selectable={false} style={{           \n                    textDecorationLine:'none',\n                    color:'white',\n                    fontSize: 12,\n                    textShadowColor: 'rgba(128, 128, 128, 1)',\n                    textShadowOffset: {width: 0, height: 0},\n                    textShadowRadius: 8,\n                    flex:1,\n                    textAlign:'center',\n                    alignItems:'center',\n                    justifyContent:'center',\n                    flexDirection:'row',\n                    \n                  }}>two</Text> */}\n                </View>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                <View style={{\n                  height:Dimensions.get('window').height/15,\n                  width:(Dimensions.get('window').height)/12,\n                  backgroundColor:'darkgrey',\n                  flex:1,\n                  flexDirection:'column',\n                  marginRight:2,\n                  marginLeft:2,\n                  borderRadius:4,\n                  borderColor:'white',\n                  overflow:'hidden'\n                  }}>\n                  {/* <Text selectable={false} style={{           \n                    textDecorationLine:'none',\n                    color:'white',\n                    fontSize: 12,\n                    textShadowColor: 'rgba(128, 128, 128, 1)',\n                    textShadowOffset: {width: 0, height: 0},\n                    textShadowRadius: 8,\n                    flex:1,\n                    textAlign:'center',\n                    alignItems:'center',\n                    justifyContent:'center',\n                    flexDirection:'row',\n                  }}>three</Text> */}\n                </View>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                <View style={{\n                  height:Dimensions.get('window').height/15,\n                  width:(Dimensions.get('window').height)/12,\n                  backgroundColor:'darkgrey',\n                  flex:1,\n                  flexDirection:'column',\n                  marginRight:2,\n                  marginLeft:2,\n                  borderRadius:4,\n                  borderColor:'white',\n                  overflow:'hidden'\n                }}>\n                  {/* <Text selectable={false} style={{           \n                    textDecorationLine:'none',\n                    color:'white',\n                    fontSize: 12,\n                    textShadowColor: 'rgba(128, 128, 128, 1)',\n                    textShadowOffset: {width: 0, height: 0},\n                    textShadowRadius: 8,\n                    flex:1,\n                    textAlign:'center',\n                    alignItems:'center',\n                    justifyContent:'center',\n                    flexDirection:'row',\n                  }}>four</Text> */}\n                </View>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                <View style={{\n                  height:Dimensions.get('window').height/15,\n                  width:(Dimensions.get('window').height)/12,\n                  backgroundColor:'darkgrey',\n                  flex:1,\n                  flexDirection:'column',\n                  marginRight:2,\n                  marginLeft:2,\n                  borderRadius:4,\n                  borderColor:'white',\n                  overflow:'hidden'\n                }}>\n                  {/* <Text selectable={false} style={{           \n                    textDecorationLine:'none',\n                    color:'white',\n                    fontSize: 12,\n                    textShadowColor: 'rgba(128, 128, 128, 1)',\n                    textShadowOffset: {width: 0, height: 0},\n                    textShadowRadius: 8,\n                    flex:1,\n                    textAlign:'center',\n                    alignItems:'center',\n                    justifyContent:'center',\n                    flexDirection:'row',\n                  }}>one</Text> */}\n                </View>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                <View style={{\n                  height:Dimensions.get('window').height/15,\n                  width:(Dimensions.get('window').height)/12,\n                  backgroundColor:'darkgrey',\n                  flex:1,\n                  flexDirection:'column',\n                  marginRight:2,\n                  marginLeft:2,\n                  borderRadius:4,\n                  borderColor:'white',\n                  overflow:'hidden'\n                }}>\n                  {/* <Text selectable={false} style={{           \n                    textDecorationLine:'none',\n                    color:'white',\n                    fontSize: 12,\n                    textShadowColor: 'rgba(128, 128, 128, 1)',\n                    textShadowOffset: {width: 0, height: 0},\n                    textShadowRadius: 8,\n                    flex:1,\n                    textAlign:'center',\n                    alignItems:'center',\n                    justifyContent:'center',\n                    flexDirection:'row',\n                  }}>two</Text> */}\n                </View>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                <View style={{\n                  height:Dimensions.get('window').height/15,\n                  width:(Dimensions.get('window').height)/12,\n                  backgroundColor:'darkgrey',\n                  flex:1,\n                  flexDirection:'column',\n                  marginRight:2,\n                  marginLeft:2,\n                  borderRadius:4,\n                  borderColor:'white',\n                  overflow:'hidden'\n                }}>\n                  {/* <Text selectable={false} style={{           \n                    textDecorationLine:'none',\n                    color:'white',\n                    fontSize: 12,\n                    textShadowColor: 'rgba(128, 128, 128, 1)',\n                    textShadowOffset: {width: 0, height: 0},\n                    textShadowRadius: 8,\n                    flex:1,\n                    textAlign:'center',\n                    alignItems:'center',\n                    justifyContent:'center',\n                    flexDirection:'row',\n                  }}>three</Text> */}\n                </View>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                <View style={{\n                  height:Dimensions.get('window').height/15,\n                  width:(Dimensions.get('window').height)/12,\n                  backgroundColor:'darkgrey',\n                  flex:1,\n                  flexDirection:'column',\n                  marginRight:2,\n                  marginLeft:2,\n                  borderRadius:4,\n                  borderColor:'white',\n                  overflow:'hidden'\n                }}>\n                  {/* <Text selectable={false} style={{           \n                    textDecorationLine:'none',\n                    color:'white',\n                    fontSize: 12,\n                    textShadowColor: 'rgba(128, 128, 128, 1)',\n                    textShadowOffset: {width: 0, height: 0},\n                    textShadowRadius: 8,\n                    flex:1,\n                    textAlign:'center',\n                    alignItems:'center',\n                    justifyContent:'center',\n                    flexDirection:'row',\n                  }}>four</Text> */}\n                </View>\n                </TouchableOpacity>\n              </ScrollView>\n            </KeyboardAvoidingView> \n        </View> \n    )\n  // }\n  }\n\nexport default Home\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postActions';\nimport {View,Text,StyleSheet} from 'react-native';\n\n\n  \n  const mapStateToProps = state => ({\n    posts: state.posts.items,\n    newPost: state.posts.item\n  });\n\nclass Posts extends Component {\n  componentWillMount() {\n    //this.props.fetchPosts();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.newPost) {\n      this.props.posts.unshift(nextProps.newPost);\n    }\n  }\n\n  render() {\n    \n    const postItems = this.props.posts.map((post, i)=>\n      <View key={i} style={{\n\n      }}>\n        <Text style={{\n          color:'black',\n          // textShadowColor: 'rgba(1, 1, 1, 1)',\n          // textShadowOffset: {width: 0, height: 0},\n          // textShadowRadius: 20\n          }}>{post}</Text>\n      </View>\n    );\n  \n    return (\n      <View style={{\n        margin:1,\n        borderColor:'#cfcfcf',\n        borderWidth:1,\n        // shadowColor: 'rgba(1, 1, 1, 1)',\n        // shadowOffset: {width: 0, height: 0},\n        // shadowRadius: 20,\n        }}>\n        {postItems}\n      </View>\n    );\n    \n  }\n}\n\nPosts.propTypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  posts: PropTypes.array.isRequired,\n  newPost: PropTypes.object\n};\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);","import {Dimensions} from 'react-native'\nexport const fetchPosts = () => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(res => res.json())\n    .then(posts =>\n      dispatch({\n        type: 'FETCH_POSTS',\n        payload: posts\n      })\n    );\n};\nexport const setTitleOnload = (title) => {\n  \n   return({\n     type: 'SET_TITLE',\n     payload: title\n   })\n  }\n\nexport const getYscrolled=(e)=>{\n    var payload=String(e.target)\n    return({\n      type:'GET_Y_SCROLLED',\n      payload:payload\n    })\n}\n\nexport const updateDimensions =(event) =>{\n  //var width= Math.floor(Dimensions.get('window').width)\n        //console.log('width received is'+event.target.innerWidth)\n        return({\n          type:'SET_WIDTH',\n          payload:event.target.innerWidth\n        })\n}\nexport const createPost = (postData) => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify(postData)\n  })\n    .then(res => res.json())\n    .then(post =>\n      dispatch({\n        type: 'NEW_POST',\n        payload: post\n      })\n    );\n};\nexport const addPost = (text) => dispatch => {\n  //console.log(text)\n    dispatch({\n      type: 'ADD_POST',\n      payload: text\n    }) \n};\nexport const setTitle = (title) => dispatch => {\n  //console.log(title)\n  dispatch({\n    type: 'SET_TITLE',\n    payload: title\n  })\n\n};","import React, { Component,memo } from 'react';\nimport { BrowserRouter,HashRouter, Route, Link,Router,Switch } from \"react-router-dom\";\nimport NavBar from './NavBar'\n//import Todo from './Todo'\nimport Home from './Home'\nimport NoMatch from './NoMatch'\n// import Map from './Map'\n// import Catalogue from './screens/CatalogueScreen'\n// import Category from './screens/CategoryScreen'\n// import Product from './screens/ProductScreen'\n// class RouterElement extends Component {\n//     render() {\n//         return (\n//             <BrowserRouter>\n//                 <Switch>\n//                     <Route exact path=\"/\" component={Home} />\n//                     <Route exact path=\"/todo\" render={()=><Todo itemsChanged={handleItems} items={state.items}/>}>\n//                     </Route>\n//                     <Route exact path=\"/map\" component={Map}/>\n//                     <Route component={NoMatch} />\n//                 </Switch>\n//                 <NavBar />\n//             </BrowserRouter>\n//         );\n//     }\n// }\nclass RouterElement extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    {/* <Route exact path=\"/todo\" component={Todo}/> */}\n                    <Route exact path=\"/map\" component={Map}/>\n                    {/* <Route exact path=\"/Catalogue\" component={Catalogue} />\n                    <Route exact path=\"/Category\" component={Category}/>\n                    <Route exact path=\"/Product\" component={Product}/>\n                    <Route component={NoMatch} /> */}\n                </Switch>\n                {/* <NavBar /> */}\n            </BrowserRouter>\n        );\n    }\n}\nexport default memo(RouterElement);","import React,{memo }from 'react'\nimport {Text,View} from 'react-native'\nconst NoMatch = () => (\n  <View style={{\n    margin:1,\n    borderColor:'#cfcfcf',\n    borderWidth:1,\n    // shadowColor: 'rgba(1, 1, 1, 1)',\n    // shadowOffset: {width: 0, height: 0},\n    // shadowRadius: 20,\n    backgroundColor:'#ffffff',\n    alignItems:'center',\n    justifyContent:'space-evenly',\n    height:22\n  }}>\n  <Text style={{          \n  \n      height:50,\n \n      flexDirection:'row',\n      flex:1,\n      fontSize:12,\n \n      color:'black',\n      // textShadowColor: 'black',\n      // textShadowOffset: {width: 0, height: 0},\n      // textShadowRadius: 20\n    }}>\n    No Match\n  </Text>\n  </View>\n)\n\nexport default memo(NoMatch)\n","//import React,{Component,Context,useContext,useState,useEffect} from 'react';\nimport React,{Component,useContext,useState,useEffect} from 'react';\nimport {Animated,PanResponder} from 'react-native'\n//import logo from './logo.svg';\n//import './App.css';\nimport Header from './components/Header'\nimport Home from './components/Home'\nimport Posts from './components/Posts'\nimport AddPost from './components/AddPost'\nimport Swiper from './components/Swiper'\nimport NavBar from './components/NavBar'\nimport ScrollableHeader from './components/ScrollableHeader'\nimport HorizontalSwipeElements from './components/HorizontalSwipeElements'\nimport SwipeableList from './components/SwipeableList'\nimport SwipeableScroller from './components/SwipeableScroller'\nimport RouterElement from './components/RouterElement'\n// testimport NavigationV3 from './components/Navigationv3'\n//import {FlatList} from 'react'\nimport {ContextController} from './context'\n//import { Context } from \"./context\";\nimport {View,Text,ScrollView,Dimensions,Platform,SafeAreaView,StyleSheet,KeyboardAvoidingView} from 'react-native'\nimport async from 'express-async-await'\n//import {CookiesProvider, useCookies} from 'react-cookie'\n//import Cookies from 'js-cookie'\n//import Cookies from 'universal-cookie'\n//const cookies = new Cookies();\n//import cookie from 'react-cookies'\n//import {Cookies, CookiesProvider, useCookies,withCookies }from 'react-cookie'\n\nconst instructions = Platform.select({\n  ios: 'Press Cmd+R to reload,\\n' + 'Cmd+D or shake for dev menu',\n  android: 'Double tap R on your keyboard to reload,\\n' + 'Shake or press menu button for dev menu',\n});\nconst translateY = new Animated.Value(0);\n\nvar star=0\nconst _panResponder = PanResponder.create({\n  onMoveShouldSetResponderCapture: () => true,\n  onMoveShouldSetPanResponderCapture: () => true,\n  onPanResponderMove: (e,gestureState)=>{\n    translateY.setValue(gestureState.dy) \n    console.log(star+translateY._value)  \n  } ,\n\n  onPanResponderRelease: (e, {vy, dy}) => {\n    star+=dy\n    console.log(star)\n  }\n});\n// class App extends Component {\n\nconst App = (props,context)=>{\n  //const[cookies,setCookie]=useCookies({})\n  //const [state, setState] = useContext(Context);\n  // const makeRemoteRequest = () => {\n  //     if(state.data!=[]){\n  //       const { page, seed } = state;\n  //       const url = `https://randomuser.me/api/?seed=${seed}&page=${page}&results=20`;\n  //       setState({ loading: true });\n\n  //       fetch(url)\n  //         .then(res => res.json())\n  //         .then(res => {\n  //           //console.log(res.results)\n  //           var copy =[...res.results]\n  //           var indexed =[]\n  //           for (var i =0; i<copy.length;i++){\n  //             indexed[i]={...copy[i],index:i}\n  //           }\n          \n  //           setState({\n  //             //data: page === 1 ? res.results : [...state.data, ...res.results],\n  //             data:[...state.data,...indexed],\n  //             error: res.error || null,\n  //             loading: false,\n  //             refreshing: false\n  //           });\n  //         })\n  //         .catch(error => {\n  //           setState({ error, loading: false });\n  //         });\n  //       console.log('some how this ran')\n  //     }   \n  //   };\n  useEffect(()=>{\n    //const locals =context && context.locals || {};\n    //console.log(locals)\n    //console.log(props.name)\n    // console.log('somehow this ran in the App useEffect method!!')\n    // fetch('squwbs.herokuapp.com/api').then(res => \n    //   console.log(res.json())\n    // )\n    //console.log(Cookies.get('name'))\n    //console.log(props.cookies.get('name'))\n    //console.log(cookies.name)\n    //console.log(cookie.load('name'))\n    //  fetch('http://squwbs.herokuapp.com/readCookies',{mode:'cors'})\n    //  .then(res => res.json())\n    //  .then(res => {\n    //   console.log(JSON.stringify(res))\n    // })\n    // .catch(error => {\n    //   console.error(error)\n    //   //this.setState({ error, loading: false });\n    // });\n\n    const getUserData=async()=>{\n      const responded= await fetch('https://squwbs.herokuapp.com/readCookies',{mode:'cors'})\n      const jsonObj = await responded.json()\n      console.log(JSON.stringify(jsonObj))\n    }\n    getUserData()\n  })\n\n  \n  // componentDidMount() {\n  //  // window.scrollTo(0, 0)\n    \n  // }\n  // click(string){\n  //   alert(string)\n  // }\n  // render(){\n    const logger=(e)=>{\n      //console.log(e.nativeEvent.contentOffset.y)\n      \n    }\n    return(\n  \n      <ContextController>\n      \n        <SafeAreaView>\n          \n         <View style={{backgroundColor:'transparent',flexDirection:'column',margin:0,padding:0}}>\n\n            <RouterElement/>\n           \n          </View>\n        </SafeAreaView>\n      \n      </ContextController>\n    \n    )\n  // }\n}\n\nconst appStyle = {\n  flex:1,\n  margin:0,\n  borderColor:'#000000',\n  //borderWidth:5,\n  // shadowColor: 'rgba(1, 1, 1, 1)',\n  // shadowOffset: {width: 0, height: 0},\n  // shadowRadius: 20,\n  backgroundColor:'#ffffff',\n  alignItems:'center',\n  justifyContent:'space-evenly',\n  height:22,\n};\n//export default withCookies(App);\nexport default App;\n\n\n\n// import React, { Component } from \"react\";\n// import {\n//   AppRegistry,\n//   StyleSheet,\n//   Text,\n//   View,\n//   FlatList,\n//   AsyncStorage,\n//   Button,\n//   TextInput,\n//   Keyboard,\n//   Platform\n// } from \"react-native\";\n\n// const isAndroid = Platform.OS == \"android\";\n// const viewPadding = 10;\n\n// export default class TodoList extends Component {\n//   state = {\n//     tasks: [],\n//     text: \"\"\n//   };\n\n//   changeTextHandler = text => {\n//     setState({ text: text });\n//   };\n\n//   addTask = () => {\n//     let notEmpty = state.text.trim().length > 0;\n\n//     if (notEmpty) {\n//       this.setState(\n//         prevState => {\n//           let { tasks, text } = prevState;\n//           return {\n//             tasks: tasks.concat({ key: tasks.length, text: text }),\n//             text: \"\"\n//           };\n//         },\n//         () => Tasks.save(state.tasks)\n//       );\n//     }\n//   };\n\n//   deleteTask = i => {\n//     this.setState(\n//       prevState => {\n//         let tasks = prevState.tasks.slice();\n\n//         tasks.splice(i, 1);\n\n//         return { tasks: tasks };\n//       },\n//       () => Tasks.save(state.tasks)\n//     );\n//   };\n\n//   componentDidMount() {\n//     Keyboard.addListener(\n//       isAndroid ? \"keyboardDidShow\" : \"keyboardWillShow\",\n//       e => this.setState({ viewPadding: e.endCoordinates.height + viewPadding })\n//     );\n\n//     Keyboard.addListener(\n//       isAndroid ? \"keyboardDidHide\" : \"keyboardWillHide\",\n//       () => this.setState({ viewPadding: viewPadding })\n//     );\n\n//     Tasks.all(tasks => this.setState({ tasks: tasks || [] }));\n//   }\n\n//   render() {\n//     return (\n//       <View\n//         style={[styles.container, { paddingBottom: state.viewPadding }]}\n//       >\n//         <FlatList\n//           style={styles.list}\n//           data={this.state.tasks}\n//           renderItem={({ item, index }) =>\n//             <View>\n//               <View style={styles.listItemCont}>\n//                 <Text style={styles.listItem}>\n//                   {item.text}\n//                 </Text>\n//                 <Button title=\"X\" onPress={() => this.deleteTask(index)} />\n//               </View>\n//               <View style={styles.hr} />\n//             </View>}\n//         />\n//         <TextInput\n//           style={styles.textInput}\n//           onChangeText={this.changeTextHandler}\n//           onSubmitEditing={this.addTask}\n//           value={this.state.text}\n//           placeholder=\"Add Tasks\"\n//           returnKeyType=\"done\"\n//           returnKeyLabel=\"done\"\n//         />\n//       </View>\n//     );\n//   }\n// }\n\n// let Tasks = {\n//   convertToArrayOfObject(tasks, callback) {\n//     return callback(\n//       tasks ? tasks.split(\"||\").map((task, i) => ({ key: i, text: task })) : []\n//     );\n//   },\n//   convertToStringWithSeparators(tasks) {\n//     return tasks.map(task => task.text).join(\"||\");\n//   },\n//   all(callback) {\n//     return AsyncStorage.getItem(\"TASKS\", (err, tasks) =>\n//       this.convertToArrayOfObject(tasks, callback)\n//     );\n//   },\n//   save(tasks) {\n//     AsyncStorage.setItem(\"TASKS\", this.convertToStringWithSeparators(tasks));\n//   }\n// };\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     justifyContent: \"center\",\n//     alignItems: \"center\",\n//     backgroundColor: \"#F5FCFF\",\n//     padding: viewPadding,\n//     paddingTop: 20\n//   },\n//   list: {\n//     width: \"100%\"\n//   },\n//   listItem: {\n//     paddingTop: 2,\n//     paddingBottom: 2,\n//     fontSize: 18\n//   },\n//   hr: {\n//     height: 1,\n//     backgroundColor: \"gray\"\n//   },\n//   listItemCont: {\n//     flexDirection: \"row\",\n//     alignItems: \"center\",\n//     justifyContent: \"space-between\"\n//   },\n//   textInput: {\n//     height: 40,\n//     paddingRight: 10,\n//     paddingLeft: 10,\n//     borderColor: \"gray\",\n//     borderWidth: isAndroid ? 0 : 1,\n//     width: \"100%\"\n//   }\n// });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/96x96.9a7fb416.png\";"],"sourceRoot":""}